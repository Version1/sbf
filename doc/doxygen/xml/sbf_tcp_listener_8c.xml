<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sbf_tcp_listener_8c" kind="file" language="C++">
    <compoundname>sbfTcpListener.c</compoundname>
    <includes refid="sbf_tcp_connection_8h" local="yes">sbfTcpConnection.h</includes>
    <includes refid="sbf_tcp_connection_private_8h" local="yes">sbfTcpConnectionPrivate.h</includes>
    <includes refid="sbf_tcp_listener_8h" local="yes">sbfTcpListener.h</includes>
    <includes refid="sbf_tcp_listener_private_8h" local="yes">sbfTcpListenerPrivate.h</includes>
    <incdepgraph>
      <node id="1580">
        <label>sbfPool.h</label>
        <link refid="sbf_pool_8h"/>
        <childnode refid="1570" relation="include">
        </childnode>
        <childnode refid="1581" relation="include">
        </childnode>
        <childnode refid="1582" relation="include">
        </childnode>
      </node>
      <node id="1572">
        <label>event.h</label>
      </node>
      <node id="1581">
        <label>sbfAtomic.h</label>
        <link refid="sbf_atomic_8h"/>
        <childnode refid="1570" relation="include">
        </childnode>
      </node>
      <node id="1571">
        <label>sbfVersion.h</label>
        <link refid="sbf_version_8h"/>
      </node>
      <node id="1596">
        <label>sbfTcpListenerPrivate.h</label>
        <link refid="sbf_tcp_listener_private_8h"/>
        <childnode refid="1586" relation="include">
        </childnode>
        <childnode refid="1592" relation="include">
        </childnode>
        <childnode refid="1583" relation="include">
        </childnode>
      </node>
      <node id="1573">
        <label>syshash.h</label>
        <link refid="syshash_8h"/>
        <childnode refid="1574" relation="include">
        </childnode>
      </node>
      <node id="1587">
        <label>sbfEvent.h</label>
        <link refid="sbf_event_8h"/>
        <childnode refid="1570" relation="include">
        </childnode>
      </node>
      <node id="1577">
        <label>sbfFatal.h</label>
        <link refid="sbf_fatal_8h"/>
        <childnode refid="1570" relation="include">
        </childnode>
      </node>
      <node id="1594">
        <label>event2/listener.h</label>
      </node>
      <node id="1589">
        <label>sbfKeyValue.h</label>
        <link refid="sbf_key_value_8h"/>
        <childnode refid="1570" relation="include">
        </childnode>
      </node>
      <node id="1569">
        <label>sbfBuffer.h</label>
        <link refid="sbf_buffer_8h"/>
        <childnode refid="1570" relation="include">
        </childnode>
        <childnode refid="1580" relation="include">
        </childnode>
        <childnode refid="1583" relation="include">
        </childnode>
        <childnode refid="1584" relation="include">
        </childnode>
      </node>
      <node id="1588">
        <label>sbfHiResTimer.h</label>
        <link refid="sbf_hi_res_timer_8h"/>
        <childnode refid="1570" relation="include">
        </childnode>
      </node>
      <node id="1585">
        <label>sbfTcpConnectionPrivate.h</label>
        <link refid="sbf_tcp_connection_private_8h"/>
        <childnode refid="1586" relation="include">
        </childnode>
        <childnode refid="1592" relation="include">
        </childnode>
        <childnode refid="1583" relation="include">
        </childnode>
      </node>
      <node id="1574">
        <label>sys/types.h</label>
      </node>
      <node id="1593">
        <label>event2/thread.h</label>
      </node>
      <node id="1584">
        <label>sbfBufferInline.h</label>
        <link refid="sbf_buffer_inline_8h"/>
      </node>
      <node id="1592">
        <label>sbfMwPrivate.h</label>
        <link refid="sbf_mw_private_8h"/>
        <childnode refid="1572" relation="include">
        </childnode>
        <childnode refid="1593" relation="include">
        </childnode>
        <childnode refid="1594" relation="include">
        </childnode>
      </node>
      <node id="1568">
        <label>sbfTcpConnection.h</label>
        <link refid="sbf_tcp_connection_8h"/>
        <childnode refid="1569" relation="include">
        </childnode>
        <childnode refid="1570" relation="include">
        </childnode>
      </node>
      <node id="1583">
        <label>sbfRefCount.h</label>
        <link refid="sbf_ref_count_8h"/>
        <childnode refid="1570" relation="include">
        </childnode>
      </node>
      <node id="1591">
        <label>sbfTimer.h</label>
        <link refid="sbf_timer_8h"/>
        <childnode refid="1570" relation="include">
        </childnode>
      </node>
      <node id="1570">
        <label>sbfCommon.h</label>
        <link refid="sbf_common_8h"/>
        <childnode refid="1571" relation="include">
        </childnode>
        <childnode refid="1572" relation="include">
        </childnode>
        <childnode refid="1573" relation="include">
        </childnode>
        <childnode refid="1575" relation="include">
        </childnode>
        <childnode refid="1576" relation="include">
        </childnode>
        <childnode refid="1577" relation="include">
        </childnode>
        <childnode refid="1578" relation="include">
        </childnode>
        <childnode refid="1579" relation="include">
        </childnode>
      </node>
      <node id="1576">
        <label>systree.h</label>
        <link refid="systree_8h"/>
      </node>
      <node id="1575">
        <label>sysqueue.h</label>
        <link refid="sysqueue_8h"/>
      </node>
      <node id="1586">
        <label>sbfMw.h</label>
        <link refid="sbf_mw_8h"/>
        <childnode refid="1570" relation="include">
        </childnode>
        <childnode refid="1587" relation="include">
        </childnode>
        <childnode refid="1588" relation="include">
        </childnode>
        <childnode refid="1589" relation="include">
        </childnode>
        <childnode refid="1590" relation="include">
        </childnode>
        <childnode refid="1591" relation="include">
        </childnode>
      </node>
      <node id="1567">
        <label>common/sbfTcpListener.c</label>
        <link refid="sbf_tcp_listener_8c"/>
        <childnode refid="1568" relation="include">
        </childnode>
        <childnode refid="1585" relation="include">
        </childnode>
        <childnode refid="1595" relation="include">
        </childnode>
        <childnode refid="1596" relation="include">
        </childnode>
      </node>
      <node id="1578">
        <label>sbfLog.h</label>
        <link refid="sbf_log_8h"/>
        <childnode refid="1570" relation="include">
        </childnode>
      </node>
      <node id="1595">
        <label>sbfTcpListener.h</label>
        <link refid="sbf_tcp_listener_8h"/>
        <childnode refid="1570" relation="include">
        </childnode>
      </node>
      <node id="1590">
        <label>sbfQueue.h</label>
        <link refid="sbf_queue_8h"/>
        <childnode refid="1570" relation="include">
        </childnode>
      </node>
      <node id="1579">
        <label>sbfMemory.h</label>
        <link refid="sbf_memory_8h"/>
        <childnode refid="1570" relation="include">
        </childnode>
      </node>
      <node id="1582">
        <label>sbfPoolInline.h</label>
        <link refid="sbf_pool_inline_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="sbf_tcp_listener_8c_1a5355a1c317fde991279ac2d3cd795d8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sbfTcpListenerReadyQueueCb</definition>
        <argsstring>(sbfQueueItem item, void *closure)</argsstring>
        <name>sbfTcpListenerReadyQueueCb</name>
        <param>
          <type><ref refid="sbf_queue_8h_1ad7433ebbf8ca13f31f33dddedbdf5533" kindref="member">sbfQueueItem</ref></type>
          <declname>item</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>closure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfTcpListener.c" line="7" column="1" bodyfile="common/sbfTcpListener.c" bodystart="7" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="sbf_tcp_listener_8c_1a2c9bf153c053324ddae42528dcef9189" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sbfTcpListenerAcceptQueueCb</definition>
        <argsstring>(sbfQueueItem item, void *closure)</argsstring>
        <name>sbfTcpListenerAcceptQueueCb</name>
        <param>
          <type><ref refid="sbf_queue_8h_1ad7433ebbf8ca13f31f33dddedbdf5533" kindref="member">sbfQueueItem</ref></type>
          <declname>item</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>closure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfTcpListener.c" line="19" column="1" bodyfile="common/sbfTcpListener.c" bodystart="19" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="sbf_tcp_listener_8c_1aa55251e98cd3dfeb8ba8fcfc8fc5422d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sbfTcpListenerEventCb</definition>
        <argsstring>(struct evconnlistener *listener, evutil_socket_t s, struct sockaddr *address, int length, void *closure)</argsstring>
        <name>sbfTcpListenerEventCb</name>
        <param>
          <type>struct evconnlistener *</type>
          <declname>listener</declname>
        </param>
        <param>
          <type>evutil_socket_t</type>
          <declname>s</declname>
        </param>
        <param>
          <type>struct sockaddr *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>closure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfTcpListener.c" line="32" column="1" bodyfile="common/sbfTcpListener.c" bodystart="32" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="sbf_tcp_listener_8c_1ac07fa159f64c355c96c4184f0ab96e6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_tcp_listener_8h_1a05c4b67f3b2468fac0bb818cc5aea697" kindref="member">sbfTcpListener</ref></type>
        <definition>sbfTcpListener sbfTcpListener_create</definition>
        <argsstring>(sbfLog log, struct sbfMwThreadImpl *thread, struct sbfQueueImpl *queue, uint16_t port, sbfTcpListenerReadyCb readyCb, sbfTcpListenerAcceptCb acceptCb, void *closure)</argsstring>
        <name>sbfTcpListener_create</name>
        <param>
          <type><ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref></type>
          <declname>log</declname>
        </param>
        <param>
          <type>struct <ref refid="structsbf_mw_thread_impl" kindref="compound">sbfMwThreadImpl</ref> *</type>
          <declname>thread</declname>
        </param>
        <param>
          <type>struct <ref refid="structsbf_queue_impl" kindref="compound">sbfQueueImpl</ref> *</type>
          <declname>queue</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="sbf_tcp_listener_8h_1a40d842953865253546cbdce73e47f008" kindref="member">sbfTcpListenerReadyCb</ref></type>
          <declname>readyCb</declname>
        </param>
        <param>
          <type><ref refid="sbf_tcp_listener_8h_1a5c4e93e8dab60d62b597292d5eb0c7cc" kindref="member">sbfTcpListenerAcceptCb</ref></type>
          <declname>acceptCb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>closure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfTcpListener.c" line="54" column="1" bodyfile="common/sbfTcpListener.c" bodystart="54" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="sbf_tcp_listener_8c_1a615a3f54bc14ad74267beccc3476dc2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbfTcpListener_destroy</definition>
        <argsstring>(sbfTcpListener tl)</argsstring>
        <name>sbfTcpListener_destroy</name>
        <param>
          <type><ref refid="sbf_tcp_listener_8h_1a05c4b67f3b2468fac0bb818cc5aea697" kindref="member">sbfTcpListener</ref></type>
          <declname>tl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfTcpListener.c" line="113" column="1" bodyfile="common/sbfTcpListener.c" bodystart="113" bodyend="123"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_tcp_connection_8h" kindref="compound">sbfTcpConnection.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_tcp_connection_private_8h" kindref="compound">sbfTcpConnectionPrivate.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_tcp_listener_8h" kindref="compound">sbfTcpListener.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_tcp_listener_private_8h" kindref="compound">sbfTcpListenerPrivate.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">sbfTcpListenerReadyQueueCb<sp/>(<ref refid="structsbf_queue_item_impl" kindref="compound">sbfQueueItem</ref><sp/>item,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>closure)</highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsbf_tcp_listener_impl" kindref="compound">sbfTcpListener</ref><sp/>tl<sp/>=<sp/>closure;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tl-&gt;<ref refid="structsbf_tcp_listener_impl_1ac33d4fbfa9e98df335bffff937c80b0a" kindref="member">mReadyCb</ref><sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>!tl-&gt;<ref refid="structsbf_tcp_listener_impl_1ac9ef6e888f3efb5a7d6066746bed1148" kindref="member">mDestroyed</ref>)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tl-&gt;<ref refid="structsbf_tcp_listener_impl_1ac33d4fbfa9e98df335bffff937c80b0a" kindref="member">mReadyCb</ref><sp/>(tl,<sp/>tl-&gt;<ref refid="structsbf_tcp_listener_impl_1a95b721b3a7dbc56ebe8c5b65b2ee5163" kindref="member">mClosure</ref>);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sbfRefCount_decrement<sp/>(&amp;tl-&gt;<ref refid="structsbf_tcp_listener_impl_1a307b6a784421161ba1fb5d031dde975a" kindref="member">mRefCount</ref>))</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free<sp/>(tl);</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">sbfTcpListenerAcceptQueueCb<sp/>(<ref refid="structsbf_queue_item_impl" kindref="compound">sbfQueueItem</ref><sp/>item,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>closure)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsbf_tcp_connection_impl" kindref="compound">sbfTcpConnection</ref><sp/>tc<sp/>=<sp/>closure;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsbf_tcp_listener_impl" kindref="compound">sbfTcpListener</ref><sp/><sp/><sp/>tl<sp/>=<sp/>tc-&gt;<ref refid="structsbf_tcp_connection_impl_1a029f76ecb2d7a2040af6980d66c7e946" kindref="member">mListener</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tl-&gt;<ref refid="structsbf_tcp_listener_impl_1ac9ef6e888f3efb5a7d6066746bed1148" kindref="member">mDestroyed</ref>)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tl-&gt;<ref refid="structsbf_tcp_listener_impl_1a9061fad645b4198fd32687a7dd20e8ab" kindref="member">mAcceptCb</ref><sp/>(tl,<sp/>tc,<sp/>tl-&gt;<ref refid="structsbf_tcp_listener_impl_1a95b721b3a7dbc56ebe8c5b65b2ee5163" kindref="member">mClosure</ref>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sbfRefCount_decrement<sp/>(&amp;tl-&gt;<ref refid="structsbf_tcp_listener_impl_1a307b6a784421161ba1fb5d031dde975a" kindref="member">mRefCount</ref>))</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free<sp/>(tl);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">sbfTcpListenerEventCb<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>evconnlistener*<sp/>listener,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evutil_socket_t<sp/>s,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr*<sp/>address,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>closure)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsbf_tcp_listener_impl" kindref="compound">sbfTcpListener</ref><sp/><sp/><sp/><sp/><sp/><sp/>tl<sp/>=<sp/>closure;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsbf_tcp_connection_impl" kindref="compound">sbfTcpConnection</ref><sp/><sp/><sp/><sp/>tc;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in*<sp/>sin<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in*)address;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>tc<sp/>=<sp/><ref refid="sbf_tcp_connection_8c_1aa54f65b63c00a1f2ac03f0660b3a9bd4" kindref="member">sbfTcpConnection_wrap</ref><sp/>(tl-&gt;<ref refid="structsbf_tcp_listener_impl_1a13e651d5a3445f5e669701d56e21c9ce" kindref="member">mLog</ref>,<sp/>s,<sp/>sin);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>tc-&gt;<ref refid="structsbf_tcp_connection_impl_1a029f76ecb2d7a2040af6980d66c7e946" kindref="member">mListener</ref><sp/>=<sp/>tl;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>There<sp/>is<sp/>no<sp/>need<sp/>to<sp/>add<sp/>a<sp/>reference<sp/>to<sp/>the<sp/>connection<sp/>since<sp/>nobody<sp/>else</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>has<sp/>a<sp/>pointer<sp/>to<sp/>it<sp/>yet.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>sbfRefCount_increment<sp/>(&amp;tl-&gt;<ref refid="structsbf_tcp_listener_impl_1a307b6a784421161ba1fb5d031dde975a" kindref="member">mRefCount</ref>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_queue_8c_1a4a0a1c5ebaca33ef41cfc984c536bf01" kindref="member">sbfQueue_enqueue</ref><sp/>(tl-&gt;<ref refid="structsbf_tcp_listener_impl_1ae57a9c762f4edfd6033005cd83422e12" kindref="member">mQueue</ref>,<sp/>sbfTcpListenerAcceptQueueCb,<sp/>tc);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="structsbf_tcp_listener_impl" kindref="compound">sbfTcpListener</ref></highlight></codeline>
<codeline lineno="54" refid="sbf_tcp_listener_8h_1ac07fa159f64c355c96c4184f0ab96e6f" refkind="member"><highlight class="normal"><ref refid="sbf_tcp_listener_8c_1ac07fa159f64c355c96c4184f0ab96e6f" kindref="member">sbfTcpListener_create</ref><sp/>(<ref refid="structsbf_log_impl" kindref="compound">sbfLog</ref><sp/>log,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsbf_mw_thread_impl" kindref="compound">sbfMwThreadImpl</ref>*<sp/>thread,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structsbf_queue_impl" kindref="compound">sbfQueueImpl</ref>*<sp/>queue,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>port,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_tcp_listener_8h_1a40d842953865253546cbdce73e47f008" kindref="member">sbfTcpListenerReadyCb</ref><sp/>readyCb,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_tcp_listener_8h_1a5c4e93e8dab60d62b597292d5eb0c7cc" kindref="member">sbfTcpListenerAcceptCb</ref><sp/>acceptCb,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>closure)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsbf_tcp_listener_impl" kindref="compound">sbfTcpListener</ref><sp/><sp/><sp/><sp/><sp/>tl;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>sin;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>tl<sp/>=<sp/><ref refid="sbf_memory_8h_1ade8988c3fcdbca51eb623eb5f7ad5150" kindref="member">xcalloc</ref><sp/>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>*tl);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>tl-&gt;mLog<sp/>=<sp/>log;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>tl-&gt;mThread<sp/>=<sp/>thread;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>tl-&gt;mQueue<sp/>=<sp/>queue;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>tl-&gt;mReadyCb<sp/>=<sp/>readyCb;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>tl-&gt;mAcceptCb<sp/>=<sp/>acceptCb;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>tl-&gt;mClosure<sp/>=<sp/>closure;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>tl-&gt;<ref refid="structsbf_queue_impl_1ad4c4efb77df3d3f8a0bfed4f27a03f92" kindref="member">mDestroyed</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>sbfRefCount_init<sp/>(&amp;tl-&gt;mRefCount,<sp/>1);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_log_8h_1aae0c47552712e01de64869037cbf4e56" kindref="member">sbfLog_debug</ref><sp/>(tl-&gt;mLog,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;creating<sp/>TCP<sp/>listener<sp/>%p:<sp/>port<sp/>%hu&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tl,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>memset<sp/>(&amp;sin,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>sin);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>sin.sin_family<sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>sin.sin_addr.s_addr<sp/>=<sp/>INADDR_ANY;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>sin.sin_port<sp/>=<sp/>htons<sp/>(port);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>tl-&gt;mListener<sp/>=<sp/>evconnlistener_new_bind<sp/>(<ref refid="sbf_mw_8c_1a49eee9c382b8543bbb6e5822b6c7d554" kindref="member">sbfMw_getThreadEventBase</ref><sp/>(thread),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbfTcpListenerEventCb,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tl,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEV_OPT_THREADSAFE|</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEV_OPT_CLOSE_ON_FREE|</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEV_OPT_CLOSE_ON_EXEC|</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LEV_OPT_REUSEABLE,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr*)&amp;sin,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>sin);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tl-&gt;mListener<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_log_8h_1a623a831041e812e33a41439b449d740d" kindref="member">sbfLog_err</ref><sp/>(tl-&gt;mLog,<sp/></highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>event<sp/>listener&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>sbfRefCount_increment<sp/>(&amp;tl-&gt;mRefCount);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_queue_8c_1a4a0a1c5ebaca33ef41cfc984c536bf01" kindref="member">sbfQueue_enqueue</ref><sp/>(queue,<sp/>sbfTcpListenerReadyQueueCb,<sp/>tl);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tl;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">fail:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_tcp_listener_8c_1a615a3f54bc14ad74267beccc3476dc2e" kindref="member">sbfTcpListener_destroy</ref><sp/>(tl);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="sbf_tcp_listener_8h_1a615a3f54bc14ad74267beccc3476dc2e" refkind="member"><highlight class="normal"><ref refid="sbf_tcp_listener_8c_1a615a3f54bc14ad74267beccc3476dc2e" kindref="member">sbfTcpListener_destroy</ref><sp/>(<ref refid="structsbf_tcp_listener_impl" kindref="compound">sbfTcpListener</ref><sp/>tl)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_log_8h_1aae0c47552712e01de64869037cbf4e56" kindref="member">sbfLog_debug</ref><sp/>(tl-&gt;<ref refid="structsbf_tcp_listener_impl_1a13e651d5a3445f5e669701d56e21c9ce" kindref="member">mLog</ref>,<sp/></highlight><highlight class="stringliteral">&quot;destroying<sp/>TCP<sp/>listener<sp/>%p&quot;</highlight><highlight class="normal">,<sp/>tl);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>tl-&gt;<ref refid="structsbf_tcp_listener_impl_1ac9ef6e888f3efb5a7d6066746bed1148" kindref="member">mDestroyed</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tl-&gt;<ref refid="structsbf_tcp_listener_impl_1afa5511ca24dfb4b79265f927cb3bdf83" kindref="member">mListener</ref><sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evconnlistener_free<sp/>(tl-&gt;<ref refid="structsbf_tcp_listener_impl_1afa5511ca24dfb4b79265f927cb3bdf83" kindref="member">mListener</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sbfRefCount_decrement<sp/>(&amp;tl-&gt;<ref refid="structsbf_tcp_listener_impl_1a307b6a784421161ba1fb5d031dde975a" kindref="member">mRefCount</ref>))</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free<sp/>(tl);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="common/sbfTcpListener.c"/>
  </compounddef>
</doxygen>
