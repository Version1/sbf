<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sbf_memory_8h" kind="file" language="C++">
    <compoundname>sbfMemory.h</compoundname>
    <includes refid="sbf_common_8h" local="yes">sbfCommon.h</includes>
    <includedby refid="sbf_common_8h" local="yes">common/sbfCommon.h</includedby>
    <incdepgraph>
      <node id="350">
        <label>event.h</label>
      </node>
      <node id="349">
        <label>sbfVersion.h</label>
        <link refid="sbf_version_8h"/>
      </node>
      <node id="351">
        <label>syshash.h</label>
        <link refid="syshash_8h"/>
        <childnode refid="352" relation="include">
        </childnode>
      </node>
      <node id="355">
        <label>sbfFatal.h</label>
        <link refid="sbf_fatal_8h"/>
        <childnode refid="348" relation="include">
        </childnode>
      </node>
      <node id="352">
        <label>sys/types.h</label>
      </node>
      <node id="348">
        <label>sbfCommon.h</label>
        <link refid="sbf_common_8h"/>
        <childnode refid="349" relation="include">
        </childnode>
        <childnode refid="350" relation="include">
        </childnode>
        <childnode refid="351" relation="include">
        </childnode>
        <childnode refid="353" relation="include">
        </childnode>
        <childnode refid="354" relation="include">
        </childnode>
        <childnode refid="355" relation="include">
        </childnode>
        <childnode refid="356" relation="include">
        </childnode>
        <childnode refid="347" relation="include">
        </childnode>
      </node>
      <node id="354">
        <label>systree.h</label>
        <link refid="systree_8h"/>
      </node>
      <node id="353">
        <label>sysqueue.h</label>
        <link refid="sysqueue_8h"/>
      </node>
      <node id="356">
        <label>sbfLog.h</label>
        <link refid="sbf_log_8h"/>
        <childnode refid="348" relation="include">
        </childnode>
      </node>
      <node id="347">
        <label>common/sbfMemory.h</label>
        <link refid="sbf_memory_8h"/>
        <childnode refid="348" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="364">
        <label>common/sbfPool.h</label>
        <link refid="sbf_pool_8h"/>
        <childnode refid="365" relation="include">
        </childnode>
      </node>
      <node id="389">
        <label>common/sbfNumberString.h</label>
        <link refid="sbf_number_string_8h"/>
      </node>
      <node id="362">
        <label>common/sbfProperties.h</label>
        <link refid="sbf_properties_8h"/>
      </node>
      <node id="380">
        <label>common/sbfCacheFile.h</label>
        <link refid="sbf_cache_file_8h"/>
      </node>
      <node id="371">
        <label>handlers/common/sbfCommonHandler.h</label>
        <link refid="sbf_common_handler_8h"/>
        <childnode refid="368" relation="include">
        </childnode>
      </node>
      <node id="375">
        <label>requestreply/sbfRequestSub.h</label>
        <link refid="sbf_request_sub_8h"/>
        <childnode refid="374" relation="include">
        </childnode>
      </node>
      <node id="363">
        <label>common/sbfAtomic.h</label>
        <link refid="sbf_atomic_8h"/>
        <childnode refid="364" relation="include">
        </childnode>
      </node>
      <node id="378">
        <label>transport/sbfSub.h</label>
        <link refid="sbf_sub_8h"/>
        <childnode refid="370" relation="include">
        </childnode>
      </node>
      <node id="397">
        <label>transport/sbfTopic.h</label>
        <link refid="sbf_topic_8h"/>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="370" relation="include">
        </childnode>
      </node>
      <node id="359">
        <label>common/sbfArguments.h</label>
        <link refid="sbf_arguments_8h"/>
      </node>
      <node id="368">
        <label>handlers/udp/sbfUdpHandler.h</label>
        <link refid="sbf_udp_handler_8h"/>
      </node>
      <node id="393">
        <label>core/sbfEvent.h</label>
        <link refid="sbf_event_8h"/>
        <childnode refid="387" relation="include">
        </childnode>
      </node>
      <node id="369">
        <label>transport/sbfBatch.h</label>
        <link refid="sbf_batch_8h"/>
        <childnode refid="370" relation="include">
        </childnode>
      </node>
      <node id="360">
        <label>common/sbfFatal.h</label>
        <link refid="sbf_fatal_8h"/>
        <childnode refid="358" relation="include">
        </childnode>
      </node>
      <node id="386">
        <label>common/sbfKeyValue.h</label>
        <link refid="sbf_key_value_8h"/>
        <childnode refid="362" relation="include">
        </childnode>
        <childnode refid="387" relation="include">
        </childnode>
      </node>
      <node id="382">
        <label>common/sbfDeque.h</label>
        <link refid="sbf_deque_8h"/>
      </node>
      <node id="365">
        <label>common/sbfBuffer.h</label>
        <link refid="sbf_buffer_8h"/>
        <childnode refid="366" relation="include">
        </childnode>
        <childnode refid="367" relation="include">
        </childnode>
        <childnode refid="369" relation="include">
        </childnode>
        <childnode refid="377" relation="include">
        </childnode>
        <childnode refid="378" relation="include">
        </childnode>
      </node>
      <node id="384">
        <label>common/sbfHugePages.h</label>
        <link refid="sbf_huge_pages_8h"/>
      </node>
      <node id="394">
        <label>core/sbfHiResTimer.h</label>
        <link refid="sbf_hi_res_timer_8h"/>
        <childnode refid="387" relation="include">
        </childnode>
      </node>
      <node id="372">
        <label>handlers/tcpmesh/sbfTcpMeshHandler.h</label>
        <link refid="sbf_tcp_mesh_handler_8h"/>
      </node>
      <node id="377">
        <label>transport/sbfPub.h</label>
        <link refid="sbf_pub_8h"/>
        <childnode refid="370" relation="include">
        </childnode>
      </node>
      <node id="366">
        <label>common/sbfTcpConnection.h</label>
        <link refid="sbf_tcp_connection_8h"/>
      </node>
      <node id="385">
        <label>common/sbfInterface.h</label>
        <link refid="sbf_interface_8h"/>
        <childnode refid="371" relation="include">
        </childnode>
        <childnode refid="372" relation="include">
        </childnode>
        <childnode refid="368" relation="include">
        </childnode>
      </node>
      <node id="390">
        <label>common/sbfPath.h</label>
        <link refid="sbf_path_8h"/>
        <childnode refid="362" relation="include">
        </childnode>
      </node>
      <node id="379">
        <label>common/sbfRefCount.h</label>
        <link refid="sbf_ref_count_8h"/>
        <childnode refid="365" relation="include">
        </childnode>
      </node>
      <node id="374">
        <label>requestreply/sbfRequestReply.h</label>
        <link refid="sbf_request_reply_8h"/>
      </node>
      <node id="376">
        <label>transport/sbfHandler.h</label>
        <link refid="sbf_handler_8h"/>
        <childnode refid="372" relation="include">
        </childnode>
        <childnode refid="368" relation="include">
        </childnode>
      </node>
      <node id="396">
        <label>core/sbfTimer.h</label>
        <link refid="sbf_timer_8h"/>
        <childnode refid="387" relation="include">
        </childnode>
      </node>
      <node id="358">
        <label>common/sbfCommon.h</label>
        <link refid="sbf_common_8h"/>
        <childnode refid="359" relation="include">
        </childnode>
        <childnode refid="360" relation="include">
        </childnode>
        <childnode refid="361" relation="include">
        </childnode>
        <childnode refid="357" relation="include">
        </childnode>
        <childnode refid="363" relation="include">
        </childnode>
        <childnode refid="365" relation="include">
        </childnode>
        <childnode refid="364" relation="include">
        </childnode>
        <childnode refid="379" relation="include">
        </childnode>
        <childnode refid="380" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="382" relation="include">
        </childnode>
        <childnode refid="383" relation="include">
        </childnode>
        <childnode refid="384" relation="include">
        </childnode>
        <childnode refid="385" relation="include">
        </childnode>
        <childnode refid="386" relation="include">
        </childnode>
        <childnode refid="388" relation="include">
        </childnode>
        <childnode refid="389" relation="include">
        </childnode>
        <childnode refid="390" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
        <childnode refid="362" relation="include">
        </childnode>
        <childnode refid="366" relation="include">
        </childnode>
        <childnode refid="392" relation="include">
        </childnode>
        <childnode refid="367" relation="include">
        </childnode>
        <childnode refid="393" relation="include">
        </childnode>
        <childnode refid="394" relation="include">
        </childnode>
        <childnode refid="387" relation="include">
        </childnode>
        <childnode refid="395" relation="include">
        </childnode>
        <childnode refid="396" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="369" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
        <childnode refid="370" relation="include">
        </childnode>
        <childnode refid="377" relation="include">
        </childnode>
        <childnode refid="378" relation="include">
        </childnode>
        <childnode refid="397" relation="include">
        </childnode>
      </node>
      <node id="367">
        <label>common/sbfUdpMulticast.h</label>
        <link refid="sbf_udp_multicast_8h"/>
        <childnode refid="368" relation="include">
        </childnode>
      </node>
      <node id="370">
        <label>transport/sbfTport.h</label>
        <link refid="sbf_tport_8h"/>
        <childnode refid="371" relation="include">
        </childnode>
        <childnode refid="372" relation="include">
        </childnode>
        <childnode refid="368" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
      </node>
      <node id="383">
        <label>common/sbfGuid.h</label>
        <link refid="sbf_guid_8h"/>
      </node>
      <node id="381">
        <label>common/sbfCsvParser.h</label>
        <link refid="sbf_csv_parser_8h"/>
      </node>
      <node id="387">
        <label>core/sbfMw.h</label>
        <link refid="sbf_mw_8h"/>
        <childnode refid="371" relation="include">
        </childnode>
        <childnode refid="372" relation="include">
        </childnode>
        <childnode refid="368" relation="include">
        </childnode>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="370" relation="include">
        </childnode>
      </node>
      <node id="391">
        <label>common/sbfPerfCounter.h</label>
        <link refid="sbf_perf_counter_8h"/>
      </node>
      <node id="361">
        <label>common/sbfLog.h</label>
        <link refid="sbf_log_8h"/>
        <childnode refid="358" relation="include">
        </childnode>
        <childnode refid="362" relation="include">
        </childnode>
      </node>
      <node id="392">
        <label>common/sbfTcpListener.h</label>
        <link refid="sbf_tcp_listener_8h"/>
      </node>
      <node id="395">
        <label>core/sbfQueue.h</label>
        <link refid="sbf_queue_8h"/>
        <childnode refid="387" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="377" relation="include">
        </childnode>
        <childnode refid="378" relation="include">
        </childnode>
      </node>
      <node id="357">
        <label>common/sbfMemory.h</label>
        <link refid="sbf_memory_8h"/>
        <childnode refid="358" relation="include">
        </childnode>
      </node>
      <node id="388">
        <label>common/sbfLogFile.h</label>
        <link refid="sbf_log_file_8h"/>
      </node>
      <node id="373">
        <label>requestreply/sbfRequestPub.h</label>
        <link refid="sbf_request_pub_8h"/>
        <childnode refid="374" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="sbf_memory_8h_1a6af5faec3f9662b20ffc9903f923dec0" prot="public" static="no">
        <name>xmalloc</name>
        <initializer><ref refid="sbf_memory_8h_1a79b1cafe9ad9104dbeaf5fa154a04d44" kindref="member">sbfMemory_malloc</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfMemory.h" line="21" column="9" bodyfile="common/sbfMemory.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sbf_memory_8h_1ade8988c3fcdbca51eb623eb5f7ad5150" prot="public" static="no">
        <name>xcalloc</name>
        <initializer><ref refid="sbf_memory_8h_1af772dd098a4e99ce566b7efad5f156be" kindref="member">sbfMemory_calloc</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfMemory.h" line="31" column="9" bodyfile="common/sbfMemory.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sbf_memory_8h_1a40740062faf2d95d4935112447c464ef" prot="public" static="no">
        <name>xrealloc</name>
        <initializer><ref refid="sbf_memory_8h_1acadba9ae3e6ad8b97046efc487986fd0" kindref="member">sbfMemory_realloc</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfMemory.h" line="41" column="9" bodyfile="common/sbfMemory.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sbf_memory_8h_1a5eb055ca3b42205cc134b4a438cd9a72" prot="public" static="no">
        <name>xstrdup</name>
        <initializer><ref refid="sbf_memory_8h_1a3a49a4bb0d6f4a8a244c9c0c4a2cb0da" kindref="member">sbfMemory_strdup</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfMemory.h" line="50" column="9" bodyfile="common/sbfMemory.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sbf_memory_8h_1a01a498148ebe0f21be370f06f2ec84f7" prot="public" static="no">
        <name>xasprintf</name>
        <initializer><ref refid="sbf_memory_8h_1a65fcdc791c5fb9977c25db6974fba5d5" kindref="member">sbfMemory_asprintf</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfMemory.h" line="59" column="9" bodyfile="common/sbfMemory.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sbf_memory_8h_1af5d74576e3ce200262430d8075c2648b" prot="public" static="no">
        <name>xvasprintf</name>
        <initializer><ref refid="sbf_memory_8h_1ad9442fc4698beb004e83442c07f81f78" kindref="member">sbfMemory_vasprintf</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfMemory.h" line="68" column="9" bodyfile="common/sbfMemory.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="sbf_memory_8h_1a79b1cafe9ad9104dbeaf5fa154a04d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_common_8h_1a2e3c8d8485e2902b071ca73d389df0e4" kindref="member">SBF_BEGIN_DECLS</ref> void *</type>
        <definition>SBF_BEGIN_DECLS void* sbfMemory_malloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>sbfMemory_malloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocs a block of memory of the given size. It will return NULL if the memory cannot be allocated. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the block of memory to be allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a block of memory of the given size. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfMemory.h" line="20" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_memory_8h_1af772dd098a4e99ce566b7efad5f156be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* sbfMemory_calloc</definition>
        <argsstring>(size_t nmemb, size_t size)</argsstring>
        <name>sbfMemory_calloc</name>
        <param>
          <type>size_t</type>
          <declname>nmemb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocs a block of memory of the given size filled with zeros. It will return NULL if the memory cannot be allocated. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items to be allocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the block of memory to be allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to a block of memory of the given size filled with zeros. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfMemory.h" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_memory_8h_1acadba9ae3e6ad8b97046efc487986fd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* sbfMemory_realloc</definition>
        <argsstring>(void *ptr, size_t nmemb, size_t size)</argsstring>
        <name>sbfMemory_realloc</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nmemb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Reallocate memory at the given pointer with a new size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the source pointer to be reallocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of items to be allocated. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of an item. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the reallocated memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfMemory.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_memory_8h_1a3a49a4bb0d6f4a8a244c9c0c4a2cb0da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* sbfMemory_strdup</definition>
        <argsstring>(const char *s)</argsstring>
        <name>sbfMemory_strdup</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Duplicate a null terminated string containing a duplicate of the given string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the null terminated string to be duplicated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a null terminated string containing a duplicate of the given string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfMemory.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_memory_8h_1a65fcdc791c5fb9977c25db6974fba5d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbfMemory_asprintf</definition>
        <argsstring>(char **ret, const char *fmt,...)</argsstring>
        <name>sbfMemory_asprintf</name>
        <param>
          <type>char **</type>
          <declname>ret</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String formatting with variable number of arguments. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>null terminated string describing the error if any. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the string format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>the variable arguments to compose the formatted string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfMemory.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_memory_8h_1ad9442fc4698beb004e83442c07f81f78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbfMemory_vasprintf</definition>
        <argsstring>(char **ret, const char *fmt, va_list ap)</argsstring>
        <name>sbfMemory_vasprintf</name>
        <param>
          <type>char **</type>
          <declname>ret</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String formatting with variable number of arguments. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>null terminated string describing the error if any. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the string format. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>the variable arguments to compose the formatted string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfMemory.h" line="67" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file declares the structures and functions to handle memory. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>© Copyright 2016 Neueda all rights reserved. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="preprocessor">#ifndef<sp/>_SBF_MEMORY_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SBF_MEMORY_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_common_8h" kindref="compound">sbfCommon.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><ref refid="sbf_common_8h_1a2e3c8d8485e2902b071ca73d389df0e4" kindref="member">SBF_BEGIN_DECLS</ref></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="sbf_memory_8h_1a79b1cafe9ad9104dbeaf5fa154a04d44" kindref="member">sbfMemory_malloc</ref><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="21" refid="sbf_memory_8h_1a6af5faec3f9662b20ffc9903f923dec0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xmalloc<sp/>sbfMemory_malloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="sbf_memory_8h_1af772dd098a4e99ce566b7efad5f156be" kindref="member">sbfMemory_calloc</ref><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nmemb,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="31" refid="sbf_memory_8h_1ade8988c3fcdbca51eb623eb5f7ad5150" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xcalloc<sp/>sbfMemory_calloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="sbf_memory_8h_1acadba9ae3e6ad8b97046efc487986fd0" kindref="member">sbfMemory_realloc</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nmemb,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="41" refid="sbf_memory_8h_1a40740062faf2d95d4935112447c464ef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xrealloc<sp/>sbfMemory_realloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="sbf_memory_8h_1a3a49a4bb0d6f4a8a244c9c0c4a2cb0da" kindref="member">sbfMemory_strdup</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s);</highlight></codeline>
<codeline lineno="50" refid="sbf_memory_8h_1a5eb055ca3b42205cc134b4a438cd9a72" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xstrdup<sp/>sbfMemory_strdup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sbf_memory_8h_1a65fcdc791c5fb9977c25db6974fba5d5" kindref="member">sbfMemory_asprintf</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>ret,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...);</highlight></codeline>
<codeline lineno="59" refid="sbf_memory_8h_1a01a498148ebe0f21be370f06f2ec84f7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xasprintf<sp/>sbfMemory_asprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sbf_memory_8h_1ad9442fc4698beb004e83442c07f81f78" kindref="member">sbfMemory_vasprintf</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>ret,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="68" refid="sbf_memory_8h_1af5d74576e3ce200262430d8075c2648b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xvasprintf<sp/>sbfMemory_vasprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><ref refid="sbf_common_8h_1a04f299102afdb82186ca2307f1c33c9e" kindref="member">SBF_END_DECLS</ref></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_SBF_MEMORY_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="common/sbfMemory.h"/>
  </compounddef>
</doxygen>
