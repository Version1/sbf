<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sbf_perf_counter_8h" kind="file" language="C++">
    <compoundname>sbfPerfCounter.h</compoundname>
    <includes refid="sbf_common_8h" local="yes">sbfCommon.h</includes>
    <incdepgraph>
      <node id="426">
        <label>event.h</label>
      </node>
      <node id="425">
        <label>sbfVersion.h</label>
        <link refid="sbf_version_8h"/>
      </node>
      <node id="427">
        <label>syshash.h</label>
        <link refid="syshash_8h"/>
        <childnode refid="428" relation="include">
        </childnode>
      </node>
      <node id="431">
        <label>sbfFatal.h</label>
        <link refid="sbf_fatal_8h"/>
        <childnode refid="424" relation="include">
        </childnode>
      </node>
      <node id="428">
        <label>sys/types.h</label>
      </node>
      <node id="424">
        <label>sbfCommon.h</label>
        <link refid="sbf_common_8h"/>
        <childnode refid="425" relation="include">
        </childnode>
        <childnode refid="426" relation="include">
        </childnode>
        <childnode refid="427" relation="include">
        </childnode>
        <childnode refid="429" relation="include">
        </childnode>
        <childnode refid="430" relation="include">
        </childnode>
        <childnode refid="431" relation="include">
        </childnode>
        <childnode refid="432" relation="include">
        </childnode>
        <childnode refid="433" relation="include">
        </childnode>
      </node>
      <node id="430">
        <label>systree.h</label>
        <link refid="systree_8h"/>
      </node>
      <node id="429">
        <label>sysqueue.h</label>
        <link refid="sysqueue_8h"/>
      </node>
      <node id="423">
        <label>common/sbfPerfCounter.h</label>
        <link refid="sbf_perf_counter_8h"/>
        <childnode refid="424" relation="include">
        </childnode>
      </node>
      <node id="432">
        <label>sbfLog.h</label>
        <link refid="sbf_log_8h"/>
        <childnode refid="424" relation="include">
        </childnode>
      </node>
      <node id="433">
        <label>sbfMemory.h</label>
        <link refid="sbf_memory_8h"/>
        <childnode refid="424" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="sbf_perf_counter_8h_1a227a3f61360c9301b49abd0cef2fb75f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_common_8h_1a2e3c8d8485e2902b071ca73d389df0e4" kindref="member">SBF_BEGIN_DECLS</ref> uint64_t</type>
        <definition>SBF_BEGIN_DECLS uint64_t sbfPerfCounter_frequency</definition>
        <argsstring>(void)</argsstring>
        <name>sbfPerfCounter_frequency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the cpu frequency in microsecond. If there is an error during the frequency detection zero will be returned. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a positive value indicating the cpu frequency per microsecond or zero in case of not being able to determine the frequency. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfPerfCounter.h" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_perf_counter_8h_1a4d8c605c4a8cfe71e07299029389e292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t sbfPerfCounter_ticks</definition>
        <argsstring>(double microseconds)</argsstring>
        <name>sbfPerfCounter_ticks</name>
        <param>
          <type>double</type>
          <declname>microseconds</declname>
        </param>
        <briefdescription>
<para>Returns the number of ticks for the given microseconds. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>microseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of microseconds. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of ticks for the given microseconds. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfPerfCounter.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_perf_counter_8h_1aeffb9edc51128417ceef91ccd9af0aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double sbfPerfCounter_microseconds</definition>
        <argsstring>(uint64_t ticks)</argsstring>
        <name>sbfPerfCounter_microseconds</name>
        <param>
          <type>uint64_t</type>
          <declname>ticks</declname>
        </param>
        <briefdescription>
<para>Returns the number of microseconds corresponding to the given number of CPU ticks. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ticks</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of CPU ticks. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of microseconds corresponding to the given number of CPU ticks. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfPerfCounter.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_perf_counter_8h_1a29d8d51bca4c8d203e07a471bcb2b179" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SBF_INLINE uint64_t</type>
        <definition>static SBF_INLINE uint64_t sbfPerfCounter_get</definition>
        <argsstring>(void)</argsstring>
        <name>sbfPerfCounter_get</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the value stored at the high performance counter. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the value stored at the high performance counter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfPerfCounter.h" line="54" column="1" bodyfile="common/sbfPerfCounter.h" bodystart="54" bodyend="61"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file declares the structures and functions to handle high performance counters. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>Â© Copyright 2016 Neueda all rights reserved. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="8"><highlight class="preprocessor">#ifndef<sp/>_SBF_PERF_COUNTER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SBF_PERF_COUNTER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_common_8h" kindref="compound">sbfCommon.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><ref refid="sbf_common_8h_1a2e3c8d8485e2902b071ca73d389df0e4" kindref="member">SBF_BEGIN_DECLS</ref></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">uint64_t<sp/><ref refid="sbf_perf_counter_8h_1a227a3f61360c9301b49abd0cef2fb75f" kindref="member">sbfPerfCounter_frequency</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">/*<sp/>per<sp/>microsecond<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">uint64_t<sp/><ref refid="sbf_perf_counter_8h_1a4d8c605c4a8cfe71e07299029389e292" kindref="member">sbfPerfCounter_ticks</ref><sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>microseconds);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="sbf_perf_counter_8h_1aeffb9edc51128417ceef91ccd9af0aa8" kindref="member">sbfPerfCounter_microseconds</ref><sp/>(uint64_t<sp/>ticks);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SBF_INLINE<sp/>uint64_t</highlight></codeline>
<codeline lineno="41"><highlight class="normal">sbfPerfCounter_get<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>LARGE_INTEGER<sp/>v;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>QueryPerformanceCounter<sp/>(&amp;v);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.QuadPart;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SBF_INLINE<sp/>uint64_t</highlight></codeline>
<codeline lineno="54"><highlight class="normal">sbfPerfCounter_get<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>lo;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>hi;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>__asm__<sp/>__volatile__<sp/>(</highlight><highlight class="stringliteral">&quot;rdtsc&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=a&quot;</highlight><highlight class="normal"><sp/>(lo),<sp/></highlight><highlight class="stringliteral">&quot;=d&quot;</highlight><highlight class="normal"><sp/>(hi));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint64_t)hi<sp/>&lt;&lt;<sp/>32<sp/>|<sp/>lo;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="sbf_common_8h_1a04f299102afdb82186ca2307f1c33c9e" kindref="member">SBF_END_DECLS</ref></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_SBF_PERF_COUNTER_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="common/sbfPerfCounter.h"/>
  </compounddef>
</doxygen>
