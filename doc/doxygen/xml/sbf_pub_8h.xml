<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sbf_pub_8h" kind="file" language="C++">
    <compoundname>sbfPub.h</compoundname>
    <includes refid="sbf_buffer_8h" local="yes">sbfBuffer.h</includes>
    <includes refid="sbf_common_8h" local="yes">sbfCommon.h</includes>
    <includes refid="sbf_queue_8h" local="yes">sbfQueue.h</includes>
    <includedby refid="sbf_tport_8h" local="yes">transport/sbfTport.h</includedby>
    <incdepgraph>
      <node id="1110">
        <label>sbfPool.h</label>
        <link refid="sbf_pool_8h"/>
        <childnode refid="1100" relation="include">
        </childnode>
        <childnode refid="1111" relation="include">
        </childnode>
        <childnode refid="1112" relation="include">
        </childnode>
      </node>
      <node id="1102">
        <label>event.h</label>
      </node>
      <node id="1111">
        <label>sbfAtomic.h</label>
        <link refid="sbf_atomic_8h"/>
        <childnode refid="1100" relation="include">
        </childnode>
      </node>
      <node id="1101">
        <label>sbfVersion.h</label>
        <link refid="sbf_version_8h"/>
      </node>
      <node id="1103">
        <label>syshash.h</label>
        <link refid="syshash_8h"/>
        <childnode refid="1104" relation="include">
        </childnode>
      </node>
      <node id="1107">
        <label>sbfFatal.h</label>
        <link refid="sbf_fatal_8h"/>
        <childnode refid="1100" relation="include">
        </childnode>
      </node>
      <node id="1099">
        <label>sbfBuffer.h</label>
        <link refid="sbf_buffer_8h"/>
        <childnode refid="1100" relation="include">
        </childnode>
        <childnode refid="1110" relation="include">
        </childnode>
        <childnode refid="1113" relation="include">
        </childnode>
        <childnode refid="1114" relation="include">
        </childnode>
      </node>
      <node id="1104">
        <label>sys/types.h</label>
      </node>
      <node id="1098">
        <label>transport/sbfPub.h</label>
        <link refid="sbf_pub_8h"/>
        <childnode refid="1099" relation="include">
        </childnode>
        <childnode refid="1100" relation="include">
        </childnode>
        <childnode refid="1115" relation="include">
        </childnode>
      </node>
      <node id="1114">
        <label>sbfBufferInline.h</label>
        <link refid="sbf_buffer_inline_8h"/>
      </node>
      <node id="1113">
        <label>sbfRefCount.h</label>
        <link refid="sbf_ref_count_8h"/>
        <childnode refid="1100" relation="include">
        </childnode>
      </node>
      <node id="1100">
        <label>sbfCommon.h</label>
        <link refid="sbf_common_8h"/>
        <childnode refid="1101" relation="include">
        </childnode>
        <childnode refid="1102" relation="include">
        </childnode>
        <childnode refid="1103" relation="include">
        </childnode>
        <childnode refid="1105" relation="include">
        </childnode>
        <childnode refid="1106" relation="include">
        </childnode>
        <childnode refid="1107" relation="include">
        </childnode>
        <childnode refid="1108" relation="include">
        </childnode>
        <childnode refid="1109" relation="include">
        </childnode>
      </node>
      <node id="1106">
        <label>systree.h</label>
        <link refid="systree_8h"/>
      </node>
      <node id="1105">
        <label>sysqueue.h</label>
        <link refid="sysqueue_8h"/>
      </node>
      <node id="1108">
        <label>sbfLog.h</label>
        <link refid="sbf_log_8h"/>
        <childnode refid="1100" relation="include">
        </childnode>
      </node>
      <node id="1115">
        <label>sbfQueue.h</label>
        <link refid="sbf_queue_8h"/>
        <childnode refid="1100" relation="include">
        </childnode>
      </node>
      <node id="1109">
        <label>sbfMemory.h</label>
        <link refid="sbf_memory_8h"/>
        <childnode refid="1100" relation="include">
        </childnode>
      </node>
      <node id="1112">
        <label>sbfPoolInline.h</label>
        <link refid="sbf_pool_inline_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1118">
        <label>handlers/common/sbfCommonHandler.h</label>
        <link refid="sbf_common_handler_8h"/>
        <childnode refid="1119" relation="include">
        </childnode>
      </node>
      <node id="1123">
        <label>requestreply/sbfRequestSub.h</label>
        <link refid="sbf_request_sub_8h"/>
        <childnode refid="1122" relation="include">
        </childnode>
      </node>
      <node id="1119">
        <label>handlers/udp/sbfUdpHandler.h</label>
        <link refid="sbf_udp_handler_8h"/>
      </node>
      <node id="1120">
        <label>handlers/tcpmesh/sbfTcpMeshHandler.h</label>
        <link refid="sbf_tcp_mesh_handler_8h"/>
      </node>
      <node id="1116">
        <label>transport/sbfPub.h</label>
        <link refid="sbf_pub_8h"/>
        <childnode refid="1117" relation="include">
        </childnode>
      </node>
      <node id="1122">
        <label>requestreply/sbfRequestReply.h</label>
        <link refid="sbf_request_reply_8h"/>
      </node>
      <node id="1124">
        <label>transport/sbfHandler.h</label>
        <link refid="sbf_handler_8h"/>
        <childnode refid="1120" relation="include">
        </childnode>
        <childnode refid="1119" relation="include">
        </childnode>
      </node>
      <node id="1117">
        <label>transport/sbfTport.h</label>
        <link refid="sbf_tport_8h"/>
        <childnode refid="1118" relation="include">
        </childnode>
        <childnode refid="1120" relation="include">
        </childnode>
        <childnode refid="1119" relation="include">
        </childnode>
        <childnode refid="1121" relation="include">
        </childnode>
        <childnode refid="1123" relation="include">
        </childnode>
        <childnode refid="1124" relation="include">
        </childnode>
      </node>
      <node id="1121">
        <label>requestreply/sbfRequestPub.h</label>
        <link refid="sbf_request_pub_8h"/>
        <childnode refid="1122" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" prot="public" static="no">
        <type>struct sbfPubImpl *</type>
        <definition>typedef struct sbfPubImpl* sbfPub</definition>
        <argsstring></argsstring>
        <name>sbfPub</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfPub.h" line="19" column="1" bodyfile="transport/sbfPub.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sbf_pub_8h_1a77d806a6a40e895279ba10150613113f" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* sbfPubReadyCb) (sbfPub pub, void *closure)</definition>
        <argsstring>)(sbfPub pub, void *closure)</argsstring>
        <name>sbfPubReadyCb</name>
        <briefdescription>
<para>Callback invoked when publisher is ready. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>the publisher&apos;s handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>closure</parametername>
</parameternamelist>
<parameterdescription>
<para>user data linked to the publisher&apos;s handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfPub.h" line="26" column="1" bodyfile="transport/sbfPub.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="sbf_pub_8h_1ac131d2c939956dd58a0b76df474822de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" kindref="member">sbfPub</ref></type>
        <definition>sbfPub sbfPub_create</definition>
        <argsstring>(struct sbfTportImpl *tport, sbfQueue queue, const char *topic, sbfPubReadyCb readyCb, void *closure)</argsstring>
        <name>sbfPub_create</name>
        <param>
          <type>struct sbfTportImpl *</type>
          <declname>tport</declname>
        </param>
        <param>
          <type><ref refid="sbf_queue_8h_1aa8b64a26e53f1e9c6eef9d3379d805e3" kindref="member">sbfQueue</ref></type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>topic</declname>
        </param>
        <param>
          <type><ref refid="sbf_pub_8h_1a77d806a6a40e895279ba10150613113f" kindref="member">sbfPubReadyCb</ref></type>
          <declname>readyCb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>closure</declname>
        </param>
        <briefdescription>
<para>Creates a publisher for a given port and topic. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tport</parametername>
</parameternamelist>
<parameterdescription>
<para>connection port. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>queue. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>topic</parametername>
</parameternamelist>
<parameterdescription>
<para>the topic. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>readyCb</parametername>
</parameternamelist>
<parameterdescription>
<para>the callback indicating the the publisher is ready. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>closure</parametername>
</parameternamelist>
<parameterdescription>
<para>user data linked to the publisher&apos;s handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Handler to publisher. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfPub.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_pub_8h_1a8b8b7ce4c048e15570a9de1f723ab8c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbfPub_destroy</definition>
        <argsstring>(sbfPub pub)</argsstring>
        <name>sbfPub_destroy</name>
        <param>
          <type><ref refid="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" kindref="member">sbfPub</ref></type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Releases all the resources allocated during the creation of the publisher. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>the publisher&apos;s handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfPub.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_pub_8h_1a8e3599d3fd6e997eab721abd36fe2ba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_buffer_8h_1a1e025c4644df2171527745712604be3b" kindref="member">sbfBuffer</ref></type>
        <definition>sbfBuffer sbfPub_getBuffer</definition>
        <argsstring>(sbfPub pub, size_t size)</argsstring>
        <name>sbfPub_getBuffer</name>
        <param>
          <type><ref refid="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" kindref="member">sbfPub</ref></type>
          <declname>pub</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocates and returns a buffer for a given publisher. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>the publisher&apos;s handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the buffer to be allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the buffer allocated by the publisher. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfPub.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_pub_8h_1ab1291857bc5359bc4f05482df4ba8279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbfPub_sendBuffer</definition>
        <argsstring>(sbfPub pub, sbfBuffer buffer)</argsstring>
        <name>sbfPub_sendBuffer</name>
        <param>
          <type><ref refid="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" kindref="member">sbfPub</ref></type>
          <declname>pub</declname>
        </param>
        <param>
          <type><ref refid="sbf_buffer_8h_1a1e025c4644df2171527745712604be3b" kindref="member">sbfBuffer</ref></type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Sends a buffer throught the given publisher. SendBuffer destroys the buffer. It must not have more than one reference. Messages that are too big and those sent before the ready callback are silently dropped. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>the publisher&apos;s handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to be sent. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfPub.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_pub_8h_1ae4d60151b4f9d1800d015d3c65e75cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbfPub_send</definition>
        <argsstring>(sbfPub pub, void *data, size_t size)</argsstring>
        <name>sbfPub_send</name>
        <param>
          <type><ref refid="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" kindref="member">sbfPub</ref></type>
          <declname>pub</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Sends a buffer throught the given publisher. SendBuffer destroys the buffer. It must not have more than one reference. Messages that are too big and those sent before the ready callback are silently dropped. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>the publisher&apos;s handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the payload to be sent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the payload. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfPub.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_pub_8h_1ae12218e340cc499950e37479f401910e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct sbfTopicImpl *</type>
        <definition>struct sbfTopicImpl* sbfPub_getTopic</definition>
        <argsstring>(sbfPub pub)</argsstring>
        <name>sbfPub_getTopic</name>
        <param>
          <type><ref refid="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" kindref="member">sbfPub</ref></type>
          <declname>pub</declname>
        </param>
        <briefdescription>
<para>Returns the topic associated to the publisher. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pub</parametername>
</parameternamelist>
<parameterdescription>
<para>the publisher&apos;s handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the topic associated to the publisher. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfPub.h" line="84" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file declares the structures and functions to handler a publisher. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>© Copyright 2016 Neueda all rights reserved. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="preprocessor">#ifndef<sp/>_SBF_PUB_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SBF_PUB_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_buffer_8h" kindref="compound">sbfBuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_common_8h" kindref="compound">sbfCommon.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_queue_8h" kindref="compound">sbfQueue.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><ref refid="sbf_common_8h_1a2e3c8d8485e2902b071ca73d389df0e4" kindref="member">SBF_BEGIN_DECLS</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sbfTportImpl;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sbfTopicImpl;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sbfPubImpl*<sp/><ref refid="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" kindref="member">sbfPub</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="sbf_pub_8h_1a77d806a6a40e895279ba10150613113f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="sbf_pub_8h_1a77d806a6a40e895279ba10150613113f" kindref="member">sbfPubReadyCb</ref>)<sp/>(<ref refid="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" kindref="member">sbfPub</ref><sp/>pub,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>closure);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" kindref="member">sbfPub</ref><sp/><ref refid="sbf_pub_8h_1ac131d2c939956dd58a0b76df474822de" kindref="member">sbfPub_create</ref><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sbfTportImpl*<sp/>tport,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_queue_8h_1aa8b64a26e53f1e9c6eef9d3379d805e3" kindref="member">sbfQueue</ref><sp/>queue,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>topic,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_pub_8h_1a77d806a6a40e895279ba10150613113f" kindref="member">sbfPubReadyCb</ref><sp/>readyCb,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>closure);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sbf_pub_8h_1a8b8b7ce4c048e15570a9de1f723ab8c5" kindref="member">sbfPub_destroy</ref><sp/>(<ref refid="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" kindref="member">sbfPub</ref><sp/>pub);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><ref refid="sbf_buffer_8h_1a1e025c4644df2171527745712604be3b" kindref="member">sbfBuffer</ref><sp/><ref refid="sbf_pub_8h_1a8e3599d3fd6e997eab721abd36fe2ba4" kindref="member">sbfPub_getBuffer</ref><sp/>(<ref refid="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" kindref="member">sbfPub</ref><sp/>pub,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sbf_pub_8h_1ab1291857bc5359bc4f05482df4ba8279" kindref="member">sbfPub_sendBuffer</ref><sp/>(<ref refid="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" kindref="member">sbfPub</ref><sp/>pub,<sp/><ref refid="sbf_buffer_8h_1a1e025c4644df2171527745712604be3b" kindref="member">sbfBuffer</ref><sp/>buffer);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sbf_pub_8h_1ae4d60151b4f9d1800d015d3c65e75cab" kindref="member">sbfPub_send</ref><sp/>(<ref refid="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" kindref="member">sbfPub</ref><sp/>pub,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sbfTopicImpl*<sp/><ref refid="sbf_pub_8h_1ae12218e340cc499950e37479f401910e" kindref="member">sbfPub_getTopic</ref><sp/>(<ref refid="sbf_pub_8h_1aa23045dc7b9f1d04b6dee3bb3ffe63a8" kindref="member">sbfPub</ref><sp/>pub);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="sbf_common_8h_1a04f299102afdb82186ca2307f1c33c9e" kindref="member">SBF_END_DECLS</ref></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_SBF_PUB_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="transport/sbfPub.h"/>
  </compounddef>
</doxygen>
