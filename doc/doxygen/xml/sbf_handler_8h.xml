<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sbf_handler_8h" kind="file" language="C++">
    <compoundname>sbfHandler.h</compoundname>
    <includes refid="sbf_common_8h" local="yes">sbfCommon.h</includes>
    <includes refid="sbf_tport_8h" local="yes">sbfTport.h</includes>
    <includedby refid="sbf_tcp_mesh_handler_8h" local="yes">handlers/tcpmesh/sbfTcpMeshHandler.h</includedby>
    <includedby refid="sbf_udp_handler_8h" local="yes">handlers/udp/sbfUdpHandler.h</includedby>
    <incdepgraph>
      <node id="1081">
        <label>sbfPool.h</label>
        <link refid="sbf_pool_8h"/>
        <childnode refid="1068" relation="include">
        </childnode>
        <childnode refid="1082" relation="include">
        </childnode>
        <childnode refid="1083" relation="include">
        </childnode>
      </node>
      <node id="1070">
        <label>event.h</label>
      </node>
      <node id="1082">
        <label>sbfAtomic.h</label>
        <link refid="sbf_atomic_8h"/>
        <childnode refid="1068" relation="include">
        </childnode>
      </node>
      <node id="1093">
        <label>sbfSub.h</label>
        <link refid="sbf_sub_8h"/>
        <childnode refid="1080" relation="include">
        </childnode>
        <childnode refid="1068" relation="include">
        </childnode>
        <childnode refid="1090" relation="include">
        </childnode>
      </node>
      <node id="1094">
        <label>sbfTopic.h</label>
        <link refid="sbf_topic_8h"/>
        <childnode refid="1068" relation="include">
        </childnode>
      </node>
      <node id="1069">
        <label>sbfVersion.h</label>
        <link refid="sbf_version_8h"/>
      </node>
      <node id="1071">
        <label>syshash.h</label>
        <link refid="syshash_8h"/>
        <childnode refid="1072" relation="include">
        </childnode>
      </node>
      <node id="1087">
        <label>sbfEvent.h</label>
        <link refid="sbf_event_8h"/>
        <childnode refid="1068" relation="include">
        </childnode>
      </node>
      <node id="1079">
        <label>sbfBatch.h</label>
        <link refid="sbf_batch_8h"/>
        <childnode refid="1080" relation="include">
        </childnode>
        <childnode refid="1068" relation="include">
        </childnode>
      </node>
      <node id="1075">
        <label>sbfFatal.h</label>
        <link refid="sbf_fatal_8h"/>
        <childnode refid="1068" relation="include">
        </childnode>
      </node>
      <node id="1089">
        <label>sbfKeyValue.h</label>
        <link refid="sbf_key_value_8h"/>
        <childnode refid="1068" relation="include">
        </childnode>
      </node>
      <node id="1080">
        <label>sbfBuffer.h</label>
        <link refid="sbf_buffer_8h"/>
        <childnode refid="1068" relation="include">
        </childnode>
        <childnode refid="1081" relation="include">
        </childnode>
        <childnode refid="1084" relation="include">
        </childnode>
        <childnode refid="1085" relation="include">
        </childnode>
      </node>
      <node id="1088">
        <label>sbfHiResTimer.h</label>
        <link refid="sbf_hi_res_timer_8h"/>
        <childnode refid="1068" relation="include">
        </childnode>
      </node>
      <node id="1072">
        <label>sys/types.h</label>
      </node>
      <node id="1092">
        <label>sbfPub.h</label>
        <link refid="sbf_pub_8h"/>
        <childnode refid="1080" relation="include">
        </childnode>
        <childnode refid="1068" relation="include">
        </childnode>
        <childnode refid="1090" relation="include">
        </childnode>
      </node>
      <node id="1085">
        <label>sbfBufferInline.h</label>
        <link refid="sbf_buffer_inline_8h"/>
      </node>
      <node id="1084">
        <label>sbfRefCount.h</label>
        <link refid="sbf_ref_count_8h"/>
        <childnode refid="1068" relation="include">
        </childnode>
      </node>
      <node id="1067">
        <label>transport/sbfHandler.h</label>
        <link refid="sbf_handler_8h"/>
        <childnode refid="1068" relation="include">
        </childnode>
        <childnode refid="1078" relation="include">
        </childnode>
      </node>
      <node id="1091">
        <label>sbfTimer.h</label>
        <link refid="sbf_timer_8h"/>
        <childnode refid="1068" relation="include">
        </childnode>
      </node>
      <node id="1068">
        <label>sbfCommon.h</label>
        <link refid="sbf_common_8h"/>
        <childnode refid="1069" relation="include">
        </childnode>
        <childnode refid="1070" relation="include">
        </childnode>
        <childnode refid="1071" relation="include">
        </childnode>
        <childnode refid="1073" relation="include">
        </childnode>
        <childnode refid="1074" relation="include">
        </childnode>
        <childnode refid="1075" relation="include">
        </childnode>
        <childnode refid="1076" relation="include">
        </childnode>
        <childnode refid="1077" relation="include">
        </childnode>
      </node>
      <node id="1074">
        <label>systree.h</label>
        <link refid="systree_8h"/>
      </node>
      <node id="1078">
        <label>sbfTport.h</label>
        <link refid="sbf_tport_8h"/>
        <childnode refid="1079" relation="include">
        </childnode>
        <childnode refid="1068" relation="include">
        </childnode>
        <childnode refid="1086" relation="include">
        </childnode>
        <childnode refid="1092" relation="include">
        </childnode>
        <childnode refid="1093" relation="include">
        </childnode>
        <childnode refid="1094" relation="include">
        </childnode>
      </node>
      <node id="1073">
        <label>sysqueue.h</label>
        <link refid="sysqueue_8h"/>
      </node>
      <node id="1086">
        <label>sbfMw.h</label>
        <link refid="sbf_mw_8h"/>
        <childnode refid="1068" relation="include">
        </childnode>
        <childnode refid="1087" relation="include">
        </childnode>
        <childnode refid="1088" relation="include">
        </childnode>
        <childnode refid="1089" relation="include">
        </childnode>
        <childnode refid="1090" relation="include">
        </childnode>
        <childnode refid="1091" relation="include">
        </childnode>
      </node>
      <node id="1076">
        <label>sbfLog.h</label>
        <link refid="sbf_log_8h"/>
        <childnode refid="1068" relation="include">
        </childnode>
      </node>
      <node id="1090">
        <label>sbfQueue.h</label>
        <link refid="sbf_queue_8h"/>
        <childnode refid="1068" relation="include">
        </childnode>
      </node>
      <node id="1077">
        <label>sbfMemory.h</label>
        <link refid="sbf_memory_8h"/>
        <childnode refid="1068" relation="include">
        </childnode>
      </node>
      <node id="1083">
        <label>sbfPoolInline.h</label>
        <link refid="sbf_pool_inline_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1097">
        <label>handlers/udp/sbfUdpHandler.h</label>
        <link refid="sbf_udp_handler_8h"/>
      </node>
      <node id="1096">
        <label>handlers/tcpmesh/sbfTcpMeshHandler.h</label>
        <link refid="sbf_tcp_mesh_handler_8h"/>
      </node>
      <node id="1095">
        <label>transport/sbfHandler.h</label>
        <link refid="sbf_handler_8h"/>
        <childnode refid="1096" relation="include">
        </childnode>
        <childnode refid="1097" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structsbf_handler_table" prot="public">sbfHandlerTable</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="sbf_handler_8h_1a7cf120794ea3f4e4057378288e794cf5" prot="public" static="no" mutable="no">
        <type><ref refid="sbf_common_8h_1a2e3c8d8485e2902b071ca73d389df0e4" kindref="member">SBF_BEGIN_DECLS</ref> typedef void *</type>
        <definition>SBF_BEGIN_DECLS typedef void* sbfHandler</definition>
        <argsstring></argsstring>
        <name>sbfHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfHandler.h" line="15" column="1" bodyfile="transport/sbfHandler.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="sbf_handler_8h_1afbc3f33e773c22a8e29758199c2254bd" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* sbfHandlerStream</definition>
        <argsstring></argsstring>
        <name>sbfHandlerStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfHandler.h" line="16" column="1" bodyfile="transport/sbfHandler.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sbf_handler_8h_1a3b6e24841bce408d649b41f0aebe6923" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* sbfHandlerHandle</definition>
        <argsstring></argsstring>
        <name>sbfHandlerHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfHandler.h" line="17" column="1" bodyfile="transport/sbfHandler.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sbf_handler_8h_1a5b047b3b44834708064523d3f20ae4c5" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* sbfHandlerAddStreamCompleteCb) (sbfHandlerHandle handle, sbfError error, void *closure)</definition>
        <argsstring>)(sbfHandlerHandle handle, sbfError error, void *closure)</argsstring>
        <name>sbfHandlerAddStreamCompleteCb</name>
        <briefdescription>
<para>Callback invoked when add stream is completed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>transport handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>error</parametername>
</parameternamelist>
<parameterdescription>
<para>the error during add stream operation if any. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>closure</parametername>
</parameternamelist>
<parameterdescription>
<para>Data linked to the transport handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfHandler.h" line="25" column="1" bodyfile="transport/sbfHandler.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sbf_handler_8h_1a9807fc2c0e4095ee110af36653bdf88f" prot="public" static="no">
        <type><ref refid="sbf_handler_8h_1a7cf120794ea3f4e4057378288e794cf5" kindref="member">sbfHandler</ref>(*</type>
        <definition>typedef sbfHandler(* sbfHandlerCreateFn) (sbfTport tport, sbfKeyValue properties)</definition>
        <argsstring>)(sbfTport tport, sbfKeyValue properties)</argsstring>
        <name>sbfHandlerCreateFn</name>
        <briefdescription>
<para>Creates a transport handler for a given port and properties. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tport</parametername>
</parameternamelist>
<parameterdescription>
<para>the port used to handle the transport. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a transport handler for a given port and properties. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfHandler.h" line="34" column="1" bodyfile="transport/sbfHandler.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sbf_handler_8h_1af34440a3ea5da006565c681c5a363378" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* sbfHandlerDestroyFn) (sbfHandler handler)</definition>
        <argsstring>)(sbfHandler handler)</argsstring>
        <name>sbfHandlerDestroyFn</name>
        <briefdescription>
<para>Releases all the resources allocated by the create function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>transport handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfHandler.h" line="41" column="1" bodyfile="transport/sbfHandler.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sbf_handler_8h_1afe2e653b58f3168780e9e592d33caa22" prot="public" static="no">
        <type><ref refid="sbf_handler_8h_1a3b6e24841bce408d649b41f0aebe6923" kindref="member">sbfHandlerHandle</ref>(*</type>
        <definition>typedef sbfHandlerHandle(* sbfHandlerFindStreamFn) (sbfHandler handler, sbfTopic topic)</definition>
        <argsstring>)(sbfHandler handler, sbfTopic topic)</argsstring>
        <name>sbfHandlerFindStreamFn</name>
        <briefdescription>
<para>FindStream and AddStream can come off any thread, RemoveStream off the event thread. All three are synchronized by the caller, but the handler must guarantee that the handle given to AddStream is available immediately from FindStream, even if the AddStreamComplete callback has not yet been fired. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>transport handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>topic</parametername>
</parameternamelist>
<parameterdescription>
<para>the topic related to the stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the transport handler. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfHandler.h" line="55" column="1" bodyfile="transport/sbfHandler.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sbf_handler_8h_1ac27fb6df67acb007f460ff1a361df8c0" prot="public" static="no">
        <type><ref refid="sbf_handler_8h_1afbc3f33e773c22a8e29758199c2254bd" kindref="member">sbfHandlerStream</ref>(*</type>
        <definition>typedef sbfHandlerStream(* sbfHandlerAddStreamFn) (sbfHandler handler, sbfTopic topic, sbfMwThread thread, sbfHandlerHandle handle, sbfHandlerAddStreamCompleteCb cb, void *closure)</definition>
        <argsstring>)(sbfHandler handler, sbfTopic topic, sbfMwThread thread, sbfHandlerHandle handle, sbfHandlerAddStreamCompleteCb cb, void *closure)</argsstring>
        <name>sbfHandlerAddStreamFn</name>
        <briefdescription>
<para>Adds a stream to a given transport handler, topic. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>transport handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>topic</parametername>
</parameternamelist>
<parameterdescription>
<para>the topic to be linked to the stream. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread</parametername>
</parameternamelist>
<parameterdescription>
<para>a thread. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>a callback that will be invoked when stream is completed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>returns a stream handler. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfHandler.h" line="66" column="1" bodyfile="transport/sbfHandler.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sbf_handler_8h_1aa8d7d120f70f028e72e2f2ce51518a3c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* sbfHandlerRemoveStreamFn) (sbfHandlerStream stream)</definition>
        <argsstring>)(sbfHandlerStream stream)</argsstring>
        <name>sbfHandlerRemoveStreamFn</name>
        <briefdescription>
<para>Removes a stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfHandler.h" line="78" column="1" bodyfile="transport/sbfHandler.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sbf_handler_8h_1ad0064fd4d91a1cd37c1be20eb953b6c9" prot="public" static="no">
        <type><ref refid="sbf_buffer_8h_1a1e025c4644df2171527745712604be3b" kindref="member">sbfBuffer</ref>(*</type>
        <definition>typedef sbfBuffer(* sbfHandlerGetBufferFn) (sbfHandlerStream stream, size_t size)</definition>
        <argsstring>)(sbfHandlerStream stream, size_t size)</argsstring>
        <name>sbfHandlerGetBufferFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfHandler.h" line="80" column="1" bodyfile="transport/sbfHandler.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sbf_handler_8h_1a5cbfeb57eb9d817d78522ded62079b36" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* sbfHandlerSendBufferFn) (sbfHandlerStream stream, sbfBuffer buffer)</definition>
        <argsstring>)(sbfHandlerStream stream, sbfBuffer buffer)</argsstring>
        <name>sbfHandlerSendBufferFn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfHandler.h" line="82" column="1" bodyfile="transport/sbfHandler.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="sbf_handler_8h_1a24c0618c6c73167661852a9b0e27a3c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsbf_handler_table" kindref="compound">sbfHandlerTable</ref> *</type>
        <definition>sbfHandlerTable* sbfHandler_load</definition>
        <argsstring>(sbfLog log, const char *type)</argsstring>
        <name>sbfHandler_load</name>
        <param>
          <type><ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref></type>
          <declname>log</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Helper function that loads a handler given its type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>log</parametername>
</parameternamelist>
<parameterdescription>
<para>a log handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of connection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to handler table. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfHandler.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_handler_8h_1a9f5cff6a4fa8c8cb0fec7ab404b09fc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sbfHandler_size</definition>
        <argsstring>(void *data, size_t size)</argsstring>
        <name>sbfHandler_size</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Returns .the necessary size for a given buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the buffer containing the payload. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size in bytes of the buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the necessary size for a given buffer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfHandler.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_handler_8h_1a715719602106304462b6d493c29c78c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbfHandler_packet</definition>
        <argsstring>(sbfHandlerHandle handle, sbfBuffer buffer)</argsstring>
        <name>sbfHandler_packet</name>
        <param>
          <type><ref refid="sbf_handler_8h_1a3b6e24841bce408d649b41f0aebe6923" kindref="member">sbfHandlerHandle</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="sbf_buffer_8h_1a1e025c4644df2171527745712604be3b" kindref="member">sbfBuffer</ref></type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="transport/sbfHandler.h" line="118" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file declares structures and functions for different type of handlers. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>© Copyright 2016 Neueda all rights reserved. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="preprocessor">#ifndef<sp/>_SBF_HANDLER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SBF_HANDLER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_common_8h" kindref="compound">sbfCommon.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_tport_8h" kindref="compound">sbfTport.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><ref refid="sbf_common_8h_1a2e3c8d8485e2902b071ca73d389df0e4" kindref="member">SBF_BEGIN_DECLS</ref></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="sbf_handler_8h_1a7cf120794ea3f4e4057378288e794cf5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="sbf_handler_8h_1a7cf120794ea3f4e4057378288e794cf5" kindref="member">sbfHandler</ref>;</highlight></codeline>
<codeline lineno="16" refid="sbf_handler_8h_1afbc3f33e773c22a8e29758199c2254bd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="sbf_handler_8h_1afbc3f33e773c22a8e29758199c2254bd" kindref="member">sbfHandlerStream</ref>;</highlight></codeline>
<codeline lineno="17" refid="sbf_handler_8h_1a3b6e24841bce408d649b41f0aebe6923" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="sbf_handler_8h_1a3b6e24841bce408d649b41f0aebe6923" kindref="member">sbfHandlerHandle</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="sbf_handler_8h_1a5b047b3b44834708064523d3f20ae4c5" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="sbf_handler_8h_1a5b047b3b44834708064523d3f20ae4c5" kindref="member">sbfHandlerAddStreamCompleteCb</ref>)<sp/>(<ref refid="sbf_handler_8h_1a3b6e24841bce408d649b41f0aebe6923" kindref="member">sbfHandlerHandle</ref><sp/>handle,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_common_8h_1a55668977c9501578c245e806c1212de9" kindref="member">sbfError</ref><sp/>error,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>closure);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="sbf_handler_8h_1a9807fc2c0e4095ee110af36653bdf88f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="sbf_handler_8h_1a7cf120794ea3f4e4057378288e794cf5" kindref="member">sbfHandler</ref><sp/>(*<ref refid="sbf_handler_8h_1a9807fc2c0e4095ee110af36653bdf88f" kindref="member">sbfHandlerCreateFn</ref>)<sp/>(<ref refid="sbf_tport_8h_1acbaf9d451442abe85c18e3583d746181" kindref="member">sbfTport</ref><sp/>tport,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_key_value_8h_1a954d4d49b7dfd98968ab8a3e4b5dd4fa" kindref="member">sbfKeyValue</ref><sp/>properties);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="sbf_handler_8h_1af34440a3ea5da006565c681c5a363378" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="sbf_handler_8h_1af34440a3ea5da006565c681c5a363378" kindref="member">sbfHandlerDestroyFn</ref>)<sp/>(<ref refid="sbf_handler_8h_1a7cf120794ea3f4e4057378288e794cf5" kindref="member">sbfHandler</ref><sp/>handler);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="55" refid="sbf_handler_8h_1afe2e653b58f3168780e9e592d33caa22" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="sbf_handler_8h_1a3b6e24841bce408d649b41f0aebe6923" kindref="member">sbfHandlerHandle</ref><sp/>(*<ref refid="sbf_handler_8h_1afe2e653b58f3168780e9e592d33caa22" kindref="member">sbfHandlerFindStreamFn</ref>)<sp/>(<ref refid="sbf_handler_8h_1a7cf120794ea3f4e4057378288e794cf5" kindref="member">sbfHandler</ref><sp/>handler,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_topic_8h_1af2056340b1f24acb79c87fe529f7114e" kindref="member">sbfTopic</ref><sp/>topic);</highlight></codeline>
<codeline lineno="66" refid="sbf_handler_8h_1ac27fb6df67acb007f460ff1a361df8c0" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="sbf_handler_8h_1afbc3f33e773c22a8e29758199c2254bd" kindref="member">sbfHandlerStream</ref><sp/>(*<ref refid="sbf_handler_8h_1ac27fb6df67acb007f460ff1a361df8c0" kindref="member">sbfHandlerAddStreamFn</ref>)<sp/>(</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_handler_8h_1a7cf120794ea3f4e4057378288e794cf5" kindref="member">sbfHandler</ref><sp/>handler,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_topic_8h_1af2056340b1f24acb79c87fe529f7114e" kindref="member">sbfTopic</ref><sp/>topic,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_mw_8h_1aa3f5e9034630ab7894fc62735044c133" kindref="member">sbfMwThread</ref><sp/>thread,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_handler_8h_1a3b6e24841bce408d649b41f0aebe6923" kindref="member">sbfHandlerHandle</ref><sp/>handle,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_handler_8h_1a5b047b3b44834708064523d3f20ae4c5" kindref="member">sbfHandlerAddStreamCompleteCb</ref><sp/>cb,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>closure);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="sbf_handler_8h_1aa8d7d120f70f028e72e2f2ce51518a3c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="sbf_handler_8h_1aa8d7d120f70f028e72e2f2ce51518a3c" kindref="member">sbfHandlerRemoveStreamFn</ref>)<sp/>(<ref refid="sbf_handler_8h_1afbc3f33e773c22a8e29758199c2254bd" kindref="member">sbfHandlerStream</ref><sp/>stream);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="sbf_handler_8h_1ad0064fd4d91a1cd37c1be20eb953b6c9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="sbf_buffer_8h_1a1e025c4644df2171527745712604be3b" kindref="member">sbfBuffer</ref><sp/>(*<ref refid="sbf_handler_8h_1ad0064fd4d91a1cd37c1be20eb953b6c9" kindref="member">sbfHandlerGetBufferFn</ref>)<sp/>(<ref refid="sbf_handler_8h_1afbc3f33e773c22a8e29758199c2254bd" kindref="member">sbfHandlerStream</ref><sp/>stream,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="82" refid="sbf_handler_8h_1a5cbfeb57eb9d817d78522ded62079b36" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="sbf_handler_8h_1a5cbfeb57eb9d817d78522ded62079b36" kindref="member">sbfHandlerSendBufferFn</ref>)<sp/>(<ref refid="sbf_handler_8h_1afbc3f33e773c22a8e29758199c2254bd" kindref="member">sbfHandlerStream</ref><sp/>stream,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_buffer_8h_1a1e025c4644df2171527745712604be3b" kindref="member">sbfBuffer</ref><sp/>buffer);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Handler<sp/>will<sp/>never<sp/>be<sp/>given<sp/>a<sp/>packet<sp/>bigger<sp/>than<sp/>mPacketSize.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="structsbf_handler_table" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88" refid="structsbf_handler_table_1afd3283f1d899bc9ad7b1fa47aac2433d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsbf_handler_table_1afd3283f1d899bc9ad7b1fa47aac2433d" kindref="member">mPacketSize</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="structsbf_handler_table_1aaa4887afcd5ea5e098456969c872cf87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_handler_8h_1a9807fc2c0e4095ee110af36653bdf88f" kindref="member">sbfHandlerCreateFn</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsbf_handler_table_1aaa4887afcd5ea5e098456969c872cf87" kindref="member">mCreate</ref>;</highlight></codeline>
<codeline lineno="91" refid="structsbf_handler_table_1aba14b9c93de7cee554fc0574cd0aebea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_handler_8h_1af34440a3ea5da006565c681c5a363378" kindref="member">sbfHandlerDestroyFn</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsbf_handler_table_1aba14b9c93de7cee554fc0574cd0aebea" kindref="member">mDestroy</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="structsbf_handler_table_1af94f27799d27f8d232324402186c78a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_handler_8h_1afe2e653b58f3168780e9e592d33caa22" kindref="member">sbfHandlerFindStreamFn</ref><sp/><sp/><sp/><ref refid="structsbf_handler_table_1af94f27799d27f8d232324402186c78a8" kindref="member">mFindStream</ref>;</highlight></codeline>
<codeline lineno="94" refid="structsbf_handler_table_1a7854e41f179522aa0e34076d5379c4bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_handler_8h_1ac27fb6df67acb007f460ff1a361df8c0" kindref="member">sbfHandlerAddStreamFn</ref><sp/><sp/><sp/><sp/><ref refid="structsbf_handler_table_1a7854e41f179522aa0e34076d5379c4bb" kindref="member">mAddStream</ref>;</highlight></codeline>
<codeline lineno="95" refid="structsbf_handler_table_1a54e4ae99bdf581b2d7f4f6eb3d0972e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_handler_8h_1aa8d7d120f70f028e72e2f2ce51518a3c" kindref="member">sbfHandlerRemoveStreamFn</ref><sp/><ref refid="structsbf_handler_table_1a54e4ae99bdf581b2d7f4f6eb3d0972e5" kindref="member">mRemoveStream</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="structsbf_handler_table_1acd88c2ddb444b1416a9c4c4ef519b115" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_handler_8h_1ad0064fd4d91a1cd37c1be20eb953b6c9" kindref="member">sbfHandlerGetBufferFn</ref><sp/><sp/><sp/><sp/><ref refid="structsbf_handler_table_1acd88c2ddb444b1416a9c4c4ef519b115" kindref="member">mGetBuffer</ref>;</highlight></codeline>
<codeline lineno="98" refid="structsbf_handler_table_1ad36659c8c1d4a33ff7e04ebeb23855c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_handler_8h_1a5cbfeb57eb9d817d78522ded62079b36" kindref="member">sbfHandlerSendBufferFn</ref><sp/><sp/><sp/><ref refid="structsbf_handler_table_1ad36659c8c1d4a33ff7e04ebeb23855c0" kindref="member">mSendBuffer</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}<sp/><ref refid="structsbf_handler_table" kindref="compound">sbfHandlerTable</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><ref refid="structsbf_handler_table" kindref="compound">sbfHandlerTable</ref>*<sp/><ref refid="sbf_handler_8h_1a24c0618c6c73167661852a9b0e27a3c8" kindref="member">sbfHandler_load</ref><sp/>(<ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref><sp/>log,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>type);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="sbf_handler_8h_1a9f5cff6a4fa8c8cb0fec7ab404b09fc6" kindref="member">sbfHandler_size</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sbf_handler_8h_1a715719602106304462b6d493c29c78c9" kindref="member">sbfHandler_packet</ref><sp/>(<ref refid="sbf_handler_8h_1a3b6e24841bce408d649b41f0aebe6923" kindref="member">sbfHandlerHandle</ref><sp/>handle,<sp/><ref refid="sbf_buffer_8h_1a1e025c4644df2171527745712604be3b" kindref="member">sbfBuffer</ref><sp/>buffer);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_SBF_HANDLER_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="transport/sbfHandler.h"/>
  </compounddef>
</doxygen>
