<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sbf_udp_multicast_8h" kind="file" language="C++">
    <compoundname>sbfUdpMulticast.h</compoundname>
    <includes refid="sbf_buffer_8h" local="yes">sbfBuffer.h</includes>
    <includes refid="sbf_common_8h" local="yes">sbfCommon.h</includes>
    <includedby refid="sbf_udp_handler_8h" local="yes">handlers/udp/sbfUdpHandler.h</includedby>
    <incdepgraph>
      <node id="562">
        <label>sbfPool.h</label>
        <link refid="sbf_pool_8h"/>
        <childnode refid="552" relation="include">
        </childnode>
        <childnode refid="563" relation="include">
        </childnode>
        <childnode refid="564" relation="include">
        </childnode>
      </node>
      <node id="554">
        <label>event.h</label>
      </node>
      <node id="563">
        <label>sbfAtomic.h</label>
        <link refid="sbf_atomic_8h"/>
        <childnode refid="552" relation="include">
        </childnode>
      </node>
      <node id="553">
        <label>sbfVersion.h</label>
        <link refid="sbf_version_8h"/>
      </node>
      <node id="555">
        <label>syshash.h</label>
        <link refid="syshash_8h"/>
        <childnode refid="556" relation="include">
        </childnode>
      </node>
      <node id="559">
        <label>sbfFatal.h</label>
        <link refid="sbf_fatal_8h"/>
        <childnode refid="552" relation="include">
        </childnode>
      </node>
      <node id="551">
        <label>sbfBuffer.h</label>
        <link refid="sbf_buffer_8h"/>
        <childnode refid="552" relation="include">
        </childnode>
        <childnode refid="562" relation="include">
        </childnode>
        <childnode refid="565" relation="include">
        </childnode>
        <childnode refid="566" relation="include">
        </childnode>
      </node>
      <node id="556">
        <label>sys/types.h</label>
      </node>
      <node id="566">
        <label>sbfBufferInline.h</label>
        <link refid="sbf_buffer_inline_8h"/>
      </node>
      <node id="565">
        <label>sbfRefCount.h</label>
        <link refid="sbf_ref_count_8h"/>
        <childnode refid="552" relation="include">
        </childnode>
      </node>
      <node id="552">
        <label>sbfCommon.h</label>
        <link refid="sbf_common_8h"/>
        <childnode refid="553" relation="include">
        </childnode>
        <childnode refid="554" relation="include">
        </childnode>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="557" relation="include">
        </childnode>
        <childnode refid="558" relation="include">
        </childnode>
        <childnode refid="559" relation="include">
        </childnode>
        <childnode refid="560" relation="include">
        </childnode>
        <childnode refid="561" relation="include">
        </childnode>
      </node>
      <node id="550">
        <label>common/sbfUdpMulticast.h</label>
        <link refid="sbf_udp_multicast_8h"/>
        <childnode refid="551" relation="include">
        </childnode>
        <childnode refid="552" relation="include">
        </childnode>
      </node>
      <node id="558">
        <label>systree.h</label>
        <link refid="systree_8h"/>
      </node>
      <node id="557">
        <label>sysqueue.h</label>
        <link refid="sysqueue_8h"/>
      </node>
      <node id="560">
        <label>sbfLog.h</label>
        <link refid="sbf_log_8h"/>
        <childnode refid="552" relation="include">
        </childnode>
      </node>
      <node id="561">
        <label>sbfMemory.h</label>
        <link refid="sbf_memory_8h"/>
        <childnode refid="552" relation="include">
        </childnode>
      </node>
      <node id="564">
        <label>sbfPoolInline.h</label>
        <link refid="sbf_pool_inline_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="568">
        <label>handlers/udp/sbfUdpHandler.h</label>
        <link refid="sbf_udp_handler_8h"/>
      </node>
      <node id="567">
        <label>common/sbfUdpMulticast.h</label>
        <link refid="sbf_udp_multicast_8h"/>
        <childnode refid="568" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="sbf_udp_multicast_8h_1a65c50b3a34ecae02bc7523d78c0ad7e6" prot="public" static="no">
        <name>SBF_UDP_MULTICAST_SIZE_LIMIT</name>
        <initializer>65536</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum multicast size limit </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfUdpMulticast.h" line="20" column="9" bodyfile="common/sbfUdpMulticast.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sbf_udp_multicast_8h_1a2a2f5f2b7ca527875eb7bc72c3cbb230" prot="public" static="no">
        <name>sbfUdpMulticast_sendBuffer</name>
        <param><defname>s</defname></param>
        <param><defname>b</defname></param>
        <initializer><ref refid="sbf_udp_multicast_8h_1aec1eaeec93e82ab92451e593b98b1b74" kindref="member">sbfUdpMulticast_send</ref> (s, sbfBuffer_getData (b), sbfBuffer_getSize (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to send a buffer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfUdpMulticast.h" line="58" column="9" bodyfile="common/sbfUdpMulticast.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="sbf_udp_multicast_8h_1a8a83068bb5028fd6e20779318692a1bb" prot="public" static="no">
        <name>sbfUdpMulticastType</name>
        <enumvalue id="sbf_udp_multicast_8h_1a8a83068bb5028fd6e20779318692a1bba01f0e778e85433b2fda359550e42034a" prot="public">
          <name>SBF_UDP_MULTICAST_SEND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sbf_udp_multicast_8h_1a8a83068bb5028fd6e20779318692a1bba0ed4d05a238bba43d093d272fbd93926" prot="public">
          <name>SBF_UDP_MULTICAST_LISTEN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>UDP multicast types. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfUdpMulticast.h" line="24" column="1" bodyfile="common/sbfUdpMulticast.h" bodystart="23" bodyend="27"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="sbf_udp_multicast_8h_1ae52e3c214bf4f6bd5af4e2df923de670" prot="public" static="no">
        <type>typedefSBF_BEGIN_DECLS struct sbfUdpMulticastImpl *</type>
        <definition>typedef typedefSBF_BEGIN_DECLS struct sbfUdpMulticastImpl* sbfUdpMulticast</definition>
        <argsstring></argsstring>
        <name>sbfUdpMulticast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declares the UPD multicast&apos;s handler. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfUdpMulticast.h" line="17" column="1" bodyfile="common/sbfUdpMulticast.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sbf_udp_multicast_8h_1ab1fd6b593d030e002bcc29ce10e686d5" prot="public" static="no">
        <type><ref refid="sbf_common_8h_1a55668977c9501578c245e806c1212de9" kindref="member">sbfError</ref>(*</type>
        <definition>typedef sbfError(* sbfUdpMulticastReadCb) (sbfUdpMulticast s, sbfBuffer buffer, void *closure)</definition>
        <argsstring>)(sbfUdpMulticast s, sbfBuffer buffer, void *closure)</argsstring>
        <name>sbfUdpMulticastReadCb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback invoked when reading from UDP multicast connection. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfUdpMulticast.h" line="30" column="1" bodyfile="common/sbfUdpMulticast.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="sbf_udp_multicast_8h_1a49891e1c11e8be33bb87d06c935a863a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_udp_multicast_8h_1ae52e3c214bf4f6bd5af4e2df923de670" kindref="member">sbfUdpMulticast</ref></type>
        <definition>sbfUdpMulticast sbfUdpMulticast_create</definition>
        <argsstring>(sbfUdpMulticastType type, uint32_t interf, struct sockaddr_in *address)</argsstring>
        <name>sbfUdpMulticast_create</name>
        <param>
          <type><ref refid="sbf_udp_multicast_8h_1a8a83068bb5028fd6e20779318692a1bb" kindref="member">sbfUdpMulticastType</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>interf</declname>
        </param>
        <param>
          <type>struct sockaddr_in *</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Creates a UDP multicast connection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of UDP multicast connection. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interf</parametername>
</parameternamelist>
<parameterdescription>
<para>the interface. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>the connection details. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a UDP multicast connection&apos;s handler. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfUdpMulticast.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_udp_multicast_8h_1a3b47a5eaad0ac54b8ec2ce84a0576b37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbfUdpMulticast_destroy</definition>
        <argsstring>(sbfUdpMulticast s)</argsstring>
        <name>sbfUdpMulticast_destroy</name>
        <param>
          <type><ref refid="sbf_udp_multicast_8h_1ae52e3c214bf4f6bd5af4e2df923de670" kindref="member">sbfUdpMulticast</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Releases the memory allocated by the UDP multicast&apos;s handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the UDP multicast handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfUdpMulticast.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_udp_multicast_8h_1ab03a966a5aca2adf33af5a8553c3c900" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>sbfSocket</type>
        <definition>sbfSocket sbfUdpMulticast_getSocket</definition>
        <argsstring>(sbfUdpMulticast s)</argsstring>
        <name>sbfUdpMulticast_getSocket</name>
        <param>
          <type><ref refid="sbf_udp_multicast_8h_1ae52e3c214bf4f6bd5af4e2df923de670" kindref="member">sbfUdpMulticast</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Returns the socket for a UDP multicast connection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the UDP multicast handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the socket for a UDP multicast connection. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfUdpMulticast.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_udp_multicast_8h_1aec1eaeec93e82ab92451e593b98b1b74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_common_8h_1a55668977c9501578c245e806c1212de9" kindref="member">sbfError</ref></type>
        <definition>sbfError sbfUdpMulticast_send</definition>
        <argsstring>(sbfUdpMulticast s, const void *buf, size_t len)</argsstring>
        <name>sbfUdpMulticast_send</name>
        <param>
          <type><ref refid="sbf_udp_multicast_8h_1ae52e3c214bf4f6bd5af4e2df923de670" kindref="member">sbfUdpMulticast</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Sends a buffer through the UDP connection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the UDP multicast handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer to be sent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the buffer in bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 successful, error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfUdpMulticast.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_udp_multicast_8h_1a66a03ee47bdd40974036537c9fc07f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_common_8h_1a55668977c9501578c245e806c1212de9" kindref="member">sbfError</ref></type>
        <definition>sbfError sbfUdpMulticast_read</definition>
        <argsstring>(sbfUdpMulticast s, sbfUdpMulticastReadCb cb, void *closure, u_int limit)</argsstring>
        <name>sbfUdpMulticast_read</name>
        <param>
          <type><ref refid="sbf_udp_multicast_8h_1ae52e3c214bf4f6bd5af4e2df923de670" kindref="member">sbfUdpMulticast</ref></type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="sbf_udp_multicast_8h_1ab1fd6b593d030e002bcc29ce10e686d5" kindref="member">sbfUdpMulticastReadCb</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>closure</declname>
        </param>
        <param>
          <type>u_int</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>reads from a UDP multicast connection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the UDP multicast handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>the read callback. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>closure</parametername>
</parameternamelist>
<parameterdescription>
<para>user data linked to the read operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>number of internal read operations to be performed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if successfull, error code otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfUdpMulticast.h" line="78" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file declares the structures and functions to handle UDP multicast connections. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>© Copyright 2016 Neueda all rights reserved. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="8"><highlight class="preprocessor">#ifndef<sp/>_SBF_UDP_MULTICAST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SBF_UDP_MULTICAST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_buffer_8h" kindref="compound">sbfBuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_common_8h" kindref="compound">sbfCommon.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><ref refid="sbf_common_8h_1a2e3c8d8485e2902b071ca73d389df0e4" kindref="member">SBF_BEGIN_DECLS</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="sbf_udp_multicast_8h_1ae52e3c214bf4f6bd5af4e2df923de670" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sbfUdpMulticastImpl*<sp/><ref refid="sbf_udp_multicast_8h_1ae52e3c214bf4f6bd5af4e2df923de670" kindref="member">sbfUdpMulticast</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="sbf_udp_multicast_8h_1a65c50b3a34ecae02bc7523d78c0ad7e6" refkind="member"><highlight class="preprocessor">#define<sp/>SBF_UDP_MULTICAST_SIZE_LIMIT<sp/>65536</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="sbf_udp_multicast_8h_1a8a83068bb5028fd6e20779318692a1bb" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="25" refid="sbf_udp_multicast_8h_1a8a83068bb5028fd6e20779318692a1bba01f0e778e85433b2fda359550e42034a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_udp_multicast_8h_1a8a83068bb5028fd6e20779318692a1bba01f0e778e85433b2fda359550e42034a" kindref="member">SBF_UDP_MULTICAST_SEND</ref>,</highlight></codeline>
<codeline lineno="26" refid="sbf_udp_multicast_8h_1a8a83068bb5028fd6e20779318692a1bba0ed4d05a238bba43d093d272fbd93926" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_udp_multicast_8h_1a8a83068bb5028fd6e20779318692a1bba0ed4d05a238bba43d093d272fbd93926" kindref="member">SBF_UDP_MULTICAST_LISTEN</ref></highlight></codeline>
<codeline lineno="27"><highlight class="normal">}<sp/><ref refid="sbf_udp_multicast_8h_1a8a83068bb5028fd6e20779318692a1bb" kindref="member">sbfUdpMulticastType</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="sbf_udp_multicast_8h_1ab1fd6b593d030e002bcc29ce10e686d5" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="sbf_common_8h_1a55668977c9501578c245e806c1212de9" kindref="member">sbfError</ref><sp/>(*<ref refid="sbf_udp_multicast_8h_1ab1fd6b593d030e002bcc29ce10e686d5" kindref="member">sbfUdpMulticastReadCb</ref>)<sp/>(<ref refid="sbf_udp_multicast_8h_1ae52e3c214bf4f6bd5af4e2df923de670" kindref="member">sbfUdpMulticast</ref><sp/>s,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_buffer_8h_1a1e025c4644df2171527745712604be3b" kindref="member">sbfBuffer</ref><sp/>buffer,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>closure);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="sbf_udp_multicast_8h_1ae52e3c214bf4f6bd5af4e2df923de670" kindref="member">sbfUdpMulticast</ref><sp/><ref refid="sbf_udp_multicast_8h_1a49891e1c11e8be33bb87d06c935a863a" kindref="member">sbfUdpMulticast_create</ref><sp/>(<ref refid="sbf_udp_multicast_8h_1a8a83068bb5028fd6e20779318692a1bb" kindref="member">sbfUdpMulticastType</ref><sp/>type,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>interf,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in*<sp/>address);</highlight></codeline>
<codeline lineno="48"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sbf_udp_multicast_8h_1a3b47a5eaad0ac54b8ec2ce84a0576b37" kindref="member">sbfUdpMulticast_destroy</ref><sp/>(<ref refid="sbf_udp_multicast_8h_1ae52e3c214bf4f6bd5af4e2df923de670" kindref="member">sbfUdpMulticast</ref><sp/>s);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">sbfSocket<sp/><ref refid="sbf_udp_multicast_8h_1ab03a966a5aca2adf33af5a8553c3c900" kindref="member">sbfUdpMulticast_getSocket</ref><sp/>(<ref refid="sbf_udp_multicast_8h_1ae52e3c214bf4f6bd5af4e2df923de670" kindref="member">sbfUdpMulticast</ref><sp/>s);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="sbf_udp_multicast_8h_1a2a2f5f2b7ca527875eb7bc72c3cbb230" refkind="member"><highlight class="preprocessor">#define<sp/>sbfUdpMulticast_sendBuffer(s,<sp/>b)<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>sbfUdpMulticast_send<sp/>(s,<sp/>sbfBuffer_getData<sp/>(b),<sp/>sbfBuffer_getSize<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="sbf_common_8h_1a55668977c9501578c245e806c1212de9" kindref="member">sbfError</ref><sp/><ref refid="sbf_udp_multicast_8h_1aec1eaeec93e82ab92451e593b98b1b74" kindref="member">sbfUdpMulticast_send</ref><sp/>(<ref refid="sbf_udp_multicast_8h_1ae52e3c214bf4f6bd5af4e2df923de670" kindref="member">sbfUdpMulticast</ref><sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><ref refid="sbf_common_8h_1a55668977c9501578c245e806c1212de9" kindref="member">sbfError</ref><sp/><ref refid="sbf_udp_multicast_8h_1a66a03ee47bdd40974036537c9fc07f61" kindref="member">sbfUdpMulticast_read</ref><sp/>(<ref refid="sbf_udp_multicast_8h_1ae52e3c214bf4f6bd5af4e2df923de670" kindref="member">sbfUdpMulticast</ref><sp/>s,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_udp_multicast_8h_1ab1fd6b593d030e002bcc29ce10e686d5" kindref="member">sbfUdpMulticastReadCb</ref><sp/>cb,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>closure,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u_int<sp/>limit);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="sbf_common_8h_1a04f299102afdb82186ca2307f1c33c9e" kindref="member">SBF_END_DECLS</ref></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_SBF_UDP_MULTICAST_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="common/sbfUdpMulticast.h"/>
  </compounddef>
</doxygen>
