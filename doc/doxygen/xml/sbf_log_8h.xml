<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sbf_log_8h" kind="file" language="C++">
    <compoundname>sbfLog.h</compoundname>
    <includes refid="sbf_common_8h" local="yes">sbfCommon.h</includes>
    <includedby refid="sbf_common_8h" local="yes">common/sbfCommon.h</includedby>
    <includedby refid="sbf_properties_8h" local="yes">common/sbfProperties.h</includedby>
    <incdepgraph>
      <node id="287">
        <label>event.h</label>
      </node>
      <node id="286">
        <label>sbfVersion.h</label>
        <link refid="sbf_version_8h"/>
      </node>
      <node id="288">
        <label>syshash.h</label>
        <link refid="syshash_8h"/>
        <childnode refid="289" relation="include">
        </childnode>
      </node>
      <node id="292">
        <label>sbfFatal.h</label>
        <link refid="sbf_fatal_8h"/>
        <childnode refid="285" relation="include">
        </childnode>
      </node>
      <node id="289">
        <label>sys/types.h</label>
      </node>
      <node id="285">
        <label>sbfCommon.h</label>
        <link refid="sbf_common_8h"/>
        <childnode refid="286" relation="include">
        </childnode>
        <childnode refid="287" relation="include">
        </childnode>
        <childnode refid="288" relation="include">
        </childnode>
        <childnode refid="290" relation="include">
        </childnode>
        <childnode refid="291" relation="include">
        </childnode>
        <childnode refid="292" relation="include">
        </childnode>
        <childnode refid="284" relation="include">
        </childnode>
        <childnode refid="293" relation="include">
        </childnode>
      </node>
      <node id="291">
        <label>systree.h</label>
        <link refid="systree_8h"/>
      </node>
      <node id="290">
        <label>sysqueue.h</label>
        <link refid="sysqueue_8h"/>
      </node>
      <node id="284">
        <label>common/sbfLog.h</label>
        <link refid="sbf_log_8h"/>
        <childnode refid="285" relation="include">
        </childnode>
      </node>
      <node id="293">
        <label>sbfMemory.h</label>
        <link refid="sbf_memory_8h"/>
        <childnode refid="285" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="300">
        <label>common/sbfPool.h</label>
        <link refid="sbf_pool_8h"/>
        <childnode refid="301" relation="include">
        </childnode>
      </node>
      <node id="326">
        <label>common/sbfNumberString.h</label>
        <link refid="sbf_number_string_8h"/>
      </node>
      <node id="323">
        <label>common/sbfProperties.h</label>
        <link refid="sbf_properties_8h"/>
      </node>
      <node id="316">
        <label>common/sbfCacheFile.h</label>
        <link refid="sbf_cache_file_8h"/>
      </node>
      <node id="307">
        <label>handlers/common/sbfCommonHandler.h</label>
        <link refid="sbf_common_handler_8h"/>
        <childnode refid="304" relation="include">
        </childnode>
      </node>
      <node id="311">
        <label>requestreply/sbfRequestSub.h</label>
        <link refid="sbf_request_sub_8h"/>
        <childnode refid="310" relation="include">
        </childnode>
      </node>
      <node id="299">
        <label>common/sbfAtomic.h</label>
        <link refid="sbf_atomic_8h"/>
        <childnode refid="300" relation="include">
        </childnode>
      </node>
      <node id="314">
        <label>transport/sbfSub.h</label>
        <link refid="sbf_sub_8h"/>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="334">
        <label>transport/sbfTopic.h</label>
        <link refid="sbf_topic_8h"/>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="296">
        <label>common/sbfArguments.h</label>
        <link refid="sbf_arguments_8h"/>
      </node>
      <node id="304">
        <label>handlers/udp/sbfUdpHandler.h</label>
        <link refid="sbf_udp_handler_8h"/>
      </node>
      <node id="330">
        <label>core/sbfEvent.h</label>
        <link refid="sbf_event_8h"/>
        <childnode refid="324" relation="include">
        </childnode>
      </node>
      <node id="305">
        <label>transport/sbfBatch.h</label>
        <link refid="sbf_batch_8h"/>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="297">
        <label>common/sbfFatal.h</label>
        <link refid="sbf_fatal_8h"/>
        <childnode refid="295" relation="include">
        </childnode>
      </node>
      <node id="322">
        <label>common/sbfKeyValue.h</label>
        <link refid="sbf_key_value_8h"/>
        <childnode refid="323" relation="include">
        </childnode>
        <childnode refid="324" relation="include">
        </childnode>
      </node>
      <node id="318">
        <label>common/sbfDeque.h</label>
        <link refid="sbf_deque_8h"/>
      </node>
      <node id="301">
        <label>common/sbfBuffer.h</label>
        <link refid="sbf_buffer_8h"/>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
      </node>
      <node id="320">
        <label>common/sbfHugePages.h</label>
        <link refid="sbf_huge_pages_8h"/>
      </node>
      <node id="331">
        <label>core/sbfHiResTimer.h</label>
        <link refid="sbf_hi_res_timer_8h"/>
        <childnode refid="324" relation="include">
        </childnode>
      </node>
      <node id="308">
        <label>handlers/tcpmesh/sbfTcpMeshHandler.h</label>
        <link refid="sbf_tcp_mesh_handler_8h"/>
      </node>
      <node id="313">
        <label>transport/sbfPub.h</label>
        <link refid="sbf_pub_8h"/>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="302">
        <label>common/sbfTcpConnection.h</label>
        <link refid="sbf_tcp_connection_8h"/>
      </node>
      <node id="321">
        <label>common/sbfInterface.h</label>
        <link refid="sbf_interface_8h"/>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
      </node>
      <node id="327">
        <label>common/sbfPath.h</label>
        <link refid="sbf_path_8h"/>
        <childnode refid="323" relation="include">
        </childnode>
      </node>
      <node id="315">
        <label>common/sbfRefCount.h</label>
        <link refid="sbf_ref_count_8h"/>
        <childnode refid="301" relation="include">
        </childnode>
      </node>
      <node id="310">
        <label>requestreply/sbfRequestReply.h</label>
        <link refid="sbf_request_reply_8h"/>
      </node>
      <node id="312">
        <label>transport/sbfHandler.h</label>
        <link refid="sbf_handler_8h"/>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
      </node>
      <node id="333">
        <label>core/sbfTimer.h</label>
        <link refid="sbf_timer_8h"/>
        <childnode refid="324" relation="include">
        </childnode>
      </node>
      <node id="295">
        <label>common/sbfCommon.h</label>
        <link refid="sbf_common_8h"/>
        <childnode refid="296" relation="include">
        </childnode>
        <childnode refid="297" relation="include">
        </childnode>
        <childnode refid="294" relation="include">
        </childnode>
        <childnode refid="298" relation="include">
        </childnode>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="315" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="317" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
        <childnode refid="319" relation="include">
        </childnode>
        <childnode refid="320" relation="include">
        </childnode>
        <childnode refid="321" relation="include">
        </childnode>
        <childnode refid="322" relation="include">
        </childnode>
        <childnode refid="325" relation="include">
        </childnode>
        <childnode refid="326" relation="include">
        </childnode>
        <childnode refid="327" relation="include">
        </childnode>
        <childnode refid="328" relation="include">
        </childnode>
        <childnode refid="323" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
        <childnode refid="329" relation="include">
        </childnode>
        <childnode refid="303" relation="include">
        </childnode>
        <childnode refid="330" relation="include">
        </childnode>
        <childnode refid="331" relation="include">
        </childnode>
        <childnode refid="324" relation="include">
        </childnode>
        <childnode refid="332" relation="include">
        </childnode>
        <childnode refid="333" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="305" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
        <childnode refid="334" relation="include">
        </childnode>
      </node>
      <node id="303">
        <label>common/sbfUdpMulticast.h</label>
        <link refid="sbf_udp_multicast_8h"/>
        <childnode refid="304" relation="include">
        </childnode>
      </node>
      <node id="306">
        <label>transport/sbfTport.h</label>
        <link refid="sbf_tport_8h"/>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="312" relation="include">
        </childnode>
      </node>
      <node id="319">
        <label>common/sbfGuid.h</label>
        <link refid="sbf_guid_8h"/>
      </node>
      <node id="317">
        <label>common/sbfCsvParser.h</label>
        <link refid="sbf_csv_parser_8h"/>
      </node>
      <node id="324">
        <label>core/sbfMw.h</label>
        <link refid="sbf_mw_8h"/>
        <childnode refid="307" relation="include">
        </childnode>
        <childnode refid="308" relation="include">
        </childnode>
        <childnode refid="304" relation="include">
        </childnode>
        <childnode refid="310" relation="include">
        </childnode>
        <childnode refid="306" relation="include">
        </childnode>
      </node>
      <node id="328">
        <label>common/sbfPerfCounter.h</label>
        <link refid="sbf_perf_counter_8h"/>
      </node>
      <node id="294">
        <label>common/sbfLog.h</label>
        <link refid="sbf_log_8h"/>
        <childnode refid="295" relation="include">
        </childnode>
        <childnode refid="323" relation="include">
        </childnode>
      </node>
      <node id="329">
        <label>common/sbfTcpListener.h</label>
        <link refid="sbf_tcp_listener_8h"/>
      </node>
      <node id="332">
        <label>core/sbfQueue.h</label>
        <link refid="sbf_queue_8h"/>
        <childnode refid="324" relation="include">
        </childnode>
        <childnode refid="309" relation="include">
        </childnode>
        <childnode refid="311" relation="include">
        </childnode>
        <childnode refid="313" relation="include">
        </childnode>
        <childnode refid="314" relation="include">
        </childnode>
      </node>
      <node id="298">
        <label>common/sbfMemory.h</label>
        <link refid="sbf_memory_8h"/>
        <childnode refid="295" relation="include">
        </childnode>
      </node>
      <node id="325">
        <label>common/sbfLogFile.h</label>
        <link refid="sbf_log_file_8h"/>
      </node>
      <node id="309">
        <label>requestreply/sbfRequestPub.h</label>
        <link refid="sbf_request_pub_8h"/>
        <childnode refid="310" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="sbf_log_8h_1a623a831041e812e33a41439b449d740d" prot="public" static="no">
        <name>sbfLog_err</name>
        <param><defname>log</defname></param>
        <param><defname>fmt</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="sbf_log_8h_1ada7d50c2c5a9635abe66e8f579de598c" kindref="member">sbfLog_log</ref> (log, <ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aa4984ddd7879f627ef4c357346908f17c" kindref="member">SBF_LOG_ERROR</ref>, fmt, ## __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper macros to log usign different levels. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="93" column="9" bodyfile="common/sbfLog.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sbf_log_8h_1ad8f8ac2bf4c7e8d6dd30107362e46bb5" prot="public" static="no">
        <name>sbfLog_warn</name>
        <param><defname>log</defname></param>
        <param><defname>fmt</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="sbf_log_8h_1ada7d50c2c5a9635abe66e8f579de598c" kindref="member">sbfLog_log</ref> (log, <ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aaca4c8f89241656328aa3ec013b398701" kindref="member">SBF_LOG_WARN</ref>, fmt, ## __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="95" column="9" bodyfile="common/sbfLog.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sbf_log_8h_1a73ffd3695bf7226abff06c5e98171c24" prot="public" static="no">
        <name>sbfLog_info</name>
        <param><defname>log</defname></param>
        <param><defname>fmt</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="sbf_log_8h_1ada7d50c2c5a9635abe66e8f579de598c" kindref="member">sbfLog_log</ref> (log, <ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aa7c8cf3be99db58ea0f93825940c2b68f" kindref="member">SBF_LOG_INFO</ref>, fmt, ## __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="97" column="9" bodyfile="common/sbfLog.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sbf_log_8h_1aae0c47552712e01de64869037cbf4e56" prot="public" static="no">
        <name>sbfLog_debug</name>
        <param><defname>log</defname></param>
        <param><defname>fmt</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="sbf_log_8h_1ada7d50c2c5a9635abe66e8f579de598c" kindref="member">sbfLog_log</ref> (log, <ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aabc60d17df2f66303b04366f823e1d04b" kindref="member">SBF_LOG_DEBUG</ref>, fmt, ## __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="99" column="9" bodyfile="common/sbfLog.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" prot="public" static="no">
        <name>sbfLogLevel</name>
        <enumvalue id="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aabc60d17df2f66303b04366f823e1d04b" prot="public">
          <name>SBF_LOG_DEBUG</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aa7c8cf3be99db58ea0f93825940c2b68f" prot="public">
          <name>SBF_LOG_INFO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aaca4c8f89241656328aa3ec013b398701" prot="public">
          <name>SBF_LOG_WARN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aa4984ddd7879f627ef4c357346908f17c" prot="public">
          <name>SBF_LOG_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aad24448569b0eef884d43e6ad8b2c1550" prot="public">
          <name>SBF_LOG_OFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The log levels. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="18" column="1" bodyfile="common/sbfLog.h" bodystart="17" bodyend="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" prot="public" static="no">
        <type>struct sbfLogImpl *</type>
        <definition>typedef struct sbfLogImpl* sbfLog</definition>
        <argsstring></argsstring>
        <name>sbfLog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Declaration of the log&apos;s handler. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="27" column="1" bodyfile="common/sbfLog.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="sbf_log_8h_1a765cab47397f491727fe408d9ee0fa1b" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* sbfLogHookCb) (sbfLog log, sbfLogLevel level, const char *message, void *closure)</definition>
        <argsstring>)(sbfLog log, sbfLogLevel level, const char *message, void *closure)</argsstring>
        <name>sbfLogHookCb</name>
        <briefdescription>
<para>This callback is invoked when hook is set to the log system to intercept logging messages. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>log</parametername>
</parameternamelist>
<parameterdescription>
<para>the log&apos;s handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>the log level. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message that was hooked. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>closure</parametername>
</parameternamelist>
<parameterdescription>
<para>the user data linked to the log&apos;s hook. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 to skip the log, other value to continue. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="39" column="1" bodyfile="common/sbfLog.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="sbf_log_8h_1a85bfac777d63506a134526ca0f6ecbe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref></type>
        <definition>sbfLog sbfLog_create</definition>
        <argsstring>(struct sbfLogFileImpl *lf, const char *fmt,...) SBF_PRINTFLIKE(2</argsstring>
        <name>sbfLog_create</name>
        <param>
          <type>struct sbfLogFileImpl *</type>
          <declname>lf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Creates a log through a formatted string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lf</parametername>
</parameternamelist>
<parameterdescription>
<para>The log file&apos;s handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the formatted string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of arguments for the formatted string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the log&apos;s handler. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_8h_1a568c738e7aa35b98b16940cd4b4fc791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref> void</type>
        <definition>sbfLog void sbfLog_destroy</definition>
        <argsstring>(sbfLog log)</argsstring>
        <name>sbfLog_destroy</name>
        <param>
          <type><ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref></type>
          <declname>log</declname>
        </param>
        <briefdescription>
<para>Releases all the resources allocated by the log&apos;s handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>log</parametername>
</parameternamelist>
<parameterdescription>
<para>the log&apos;s handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_8h_1adbf42cf617525406e9063084031912dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref></type>
        <definition>sbfLogLevel sbfLog_getLevel</definition>
        <argsstring>(sbfLog log)</argsstring>
        <name>sbfLog_getLevel</name>
        <param>
          <type><ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref></type>
          <declname>log</declname>
        </param>
        <briefdescription>
<para>Returns the log&apos;s level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>log</parametername>
</parameternamelist>
<parameterdescription>
<para>the log&apos;s handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the log&apos;s level. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_8h_1af2c6d0b112df7a5b7fab1012ddee6798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbfLog_setLevel</definition>
        <argsstring>(sbfLog log, sbfLogLevel level)</argsstring>
        <name>sbfLog_setLevel</name>
        <param>
          <type><ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref></type>
          <declname>log</declname>
        </param>
        <param>
          <type><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Sets the log&apos;s level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>log</parametername>
</parameternamelist>
<parameterdescription>
<para>the log&apos;s handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>the log&apos;s level. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_8h_1af7f50ca9acb4f2d158f7f994063672dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref></type>
        <definition>sbfLogLevel sbfLog_levelFromString</definition>
        <argsstring>(const char *s, int *found)</argsstring>
        <name>sbfLog_levelFromString</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>found</declname>
        </param>
        <briefdescription>
<para>Converts from string level into level code. In the case that level string is not defined then SBF_LOG_OFF will be returned. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>null terminated string containing the log level. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>found</parametername>
</parameternamelist>
<parameterdescription>
<para>1 if found, 0 if not found. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the level code from a given null terminated string level. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_8h_1a9f7fdfac6b62c24d413959c578de6d41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* sbfLog_levelToString</definition>
        <argsstring>(sbfLogLevel level)</argsstring>
        <name>sbfLog_levelToString</name>
        <param>
          <type><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref></type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Converts from a code level into null terminated string level. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>the level code. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>null terminated string containing the level. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_8h_1ada7d50c2c5a9635abe66e8f579de598c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbfLog_log</definition>
        <argsstring>(sbfLog log, sbfLogLevel level, const char *fmt,...) SBF_PRINTFLIKE(3</argsstring>
        <name>sbfLog_log</name>
        <param>
          <type><ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref></type>
          <declname>log</declname>
        </param>
        <param>
          <type><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Logs a message with a given level into the logging system. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>log</parametername>
</parameternamelist>
<parameterdescription>
<para>the log&apos;s handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>the log level. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the formatting string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>the parameters for the formatting string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_8h_1af85dfb12efb0b1943d63630e8d9586fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void void</type>
        <definition>void void sbfLog_vlog</definition>
        <argsstring>(sbfLog log, sbfLogLevel level, const char *fmt, va_list ap)</argsstring>
        <name>sbfLog_vlog</name>
        <param>
          <type><ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref></type>
          <declname>log</declname>
        </param>
        <param>
          <type><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
<para>Logs a message with a given level into the logging system. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>log</parametername>
</parameternamelist>
<parameterdescription>
<para>the log&apos;s handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>the log level. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>the formatting string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ap</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of arguments for the formatting string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_8h_1aea6a66d1d9fc9209adcf8996c9079841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbfLog_logData</definition>
        <argsstring>(sbfLog log, sbfLogLevel level, void *buf, size_t len)</argsstring>
        <name>sbfLog_logData</name>
        <param>
          <type><ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref></type>
          <declname>log</declname>
        </param>
        <param>
          <type><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Logs a chunk of binary data with a given level into the logging system. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>log</parametername>
</parameternamelist>
<parameterdescription>
<para>the log&apos;s handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>the log level. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to be logged. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the data in bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_8h_1aa5414f66ed3a1feaba5017b2c0e804d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbfLog_setHook</definition>
        <argsstring>(sbfLog log, sbfLogLevel level, sbfLogHookCb cb, void *closure)</argsstring>
        <name>sbfLog_setHook</name>
        <param>
          <type><ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref></type>
          <declname>log</declname>
        </param>
        <param>
          <type><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref></type>
          <declname>level</declname>
        </param>
        <param>
          <type><ref refid="sbf_log_8h_1a765cab47397f491727fe408d9ee0fa1b" kindref="member">sbfLogHookCb</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>closure</declname>
        </param>
        <briefdescription>
<para>Sets a hook to the logging system to intercept the writing of log messages. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>log</parametername>
</parameternamelist>
<parameterdescription>
<para>the log&apos;s handler. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>the log&apos;s level. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>the callback to be invoked before the log is applied. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>closure</parametername>
</parameternamelist>
<parameterdescription>
<para>the user data linked to the hook. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLog.h" line="141" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file declares the structures and functions of a log system. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>© Copyright 2016 Neueda all rights reserved. </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="preprocessor">#ifndef<sp/>_SBF_LOG_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SBF_LOG_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_common_8h" kindref="compound">sbfCommon.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><ref refid="sbf_common_8h_1a2e3c8d8485e2902b071ca73d389df0e4" kindref="member">SBF_BEGIN_DECLS</ref></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sbfLogFileImpl;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19" refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aabc60d17df2f66303b04366f823e1d04b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aabc60d17df2f66303b04366f823e1d04b" kindref="member">SBF_LOG_DEBUG</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="20" refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aa7c8cf3be99db58ea0f93825940c2b68f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aa7c8cf3be99db58ea0f93825940c2b68f" kindref="member">SBF_LOG_INFO</ref>,</highlight></codeline>
<codeline lineno="21" refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aaca4c8f89241656328aa3ec013b398701" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aaca4c8f89241656328aa3ec013b398701" kindref="member">SBF_LOG_WARN</ref>,</highlight></codeline>
<codeline lineno="22" refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aa4984ddd7879f627ef4c357346908f17c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aa4984ddd7879f627ef4c357346908f17c" kindref="member">SBF_LOG_ERROR</ref>,</highlight></codeline>
<codeline lineno="23" refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aad24448569b0eef884d43e6ad8b2c1550" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540aad24448569b0eef884d43e6ad8b2c1550" kindref="member">SBF_LOG_OFF</ref></highlight></codeline>
<codeline lineno="24"><highlight class="normal">}<sp/><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sbfLogImpl*<sp/><ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>.<sp/>*/</highlight></codeline>
<codeline lineno="39" refid="sbf_log_8h_1a765cab47397f491727fe408d9ee0fa1b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="sbf_log_8h_1a765cab47397f491727fe408d9ee0fa1b" kindref="member">sbfLogHookCb</ref>)<sp/>(<ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref><sp/>log,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref><sp/>level,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>closure);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref><sp/><ref refid="sbf_log_8h_1a85bfac777d63506a134526ca0f6ecbe7" kindref="member">sbfLog_create</ref><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sbfLogFileImpl*<sp/>lf,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...)<sp/>SBF_PRINTFLIKE(2,<sp/>3);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sbf_log_8h_1a568c738e7aa35b98b16940cd4b4fc791" kindref="member">sbfLog_destroy</ref><sp/>(<ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref><sp/>log);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref><sp/><ref refid="sbf_log_8h_1adbf42cf617525406e9063084031912dd" kindref="member">sbfLog_getLevel</ref><sp/>(<ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref><sp/>log);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sbf_log_8h_1af2c6d0b112df7a5b7fab1012ddee6798" kindref="member">sbfLog_setLevel</ref><sp/>(<ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref><sp/>log,<sp/><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref><sp/>level);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref><sp/><ref refid="sbf_log_8h_1af7f50ca9acb4f2d158f7f994063672dd" kindref="member">sbfLog_levelFromString</ref><sp/>(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>found);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="sbf_log_8h_1a9f7fdfac6b62c24d413959c578de6d41" kindref="member">sbfLog_levelToString</ref><sp/>(<ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref><sp/>level);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="sbf_log_8h_1a623a831041e812e33a41439b449d740d" refkind="member"><highlight class="preprocessor">#define<sp/>sbfLog_err(log,<sp/>fmt,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>sbfLog_log<sp/>(log,<sp/>SBF_LOG_ERROR,<sp/>fmt,<sp/>##<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="sbf_log_8h_1ad8f8ac2bf4c7e8d6dd30107362e46bb5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sbfLog_warn(log,<sp/>fmt,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>sbfLog_log<sp/>(log,<sp/>SBF_LOG_WARN,<sp/>fmt,<sp/>##<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="sbf_log_8h_1a73ffd3695bf7226abff06c5e98171c24" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sbfLog_info(log,<sp/>fmt,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>sbfLog_log<sp/>(log,<sp/>SBF_LOG_INFO,<sp/>fmt,<sp/>##<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="sbf_log_8h_1aae0c47552712e01de64869037cbf4e56" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sbfLog_debug(log,<sp/>fmt,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>sbfLog_log<sp/>(log,<sp/>SBF_LOG_DEBUG,<sp/>fmt,<sp/>##<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sbf_log_8h_1ada7d50c2c5a9635abe66e8f579de598c" kindref="member">sbfLog_log</ref><sp/>(<ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref><sp/>log,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref><sp/>level,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...)<sp/>SBF_PRINTFLIKE(3,<sp/>4);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sbf_log_8h_1af85dfb12efb0b1943d63630e8d9586fc" kindref="member">sbfLog_vlog</ref><sp/>(<ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref><sp/>log,<sp/><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref><sp/>level,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>va_list<sp/>ap);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sbf_log_8h_1aea6a66d1d9fc9209adcf8996c9079841" kindref="member">sbfLog_logData</ref><sp/>(<ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref><sp/>log,<sp/><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref><sp/>level,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="sbf_log_8h_1aa5414f66ed3a1feaba5017b2c0e804d1" kindref="member">sbfLog_setHook</ref><sp/>(<ref refid="sbf_log_8h_1af52e123ee70a148a5492a53d34c16c37" kindref="member">sbfLog</ref><sp/>log,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_log_8h_1ac1844c455877a8e8e2123dec81aa540a" kindref="member">sbfLogLevel</ref><sp/>level,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_log_8h_1a765cab47397f491727fe408d9ee0fa1b" kindref="member">sbfLogHookCb</ref><sp/>cb,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>closure);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><ref refid="sbf_common_8h_1a04f299102afdb82186ca2307f1c33c9e" kindref="member">SBF_END_DECLS</ref></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_SBF_LOG_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="common/sbfLog.h"/>
  </compounddef>
</doxygen>
