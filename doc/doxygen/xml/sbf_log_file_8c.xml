<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sbf_log_file_8c" kind="file" language="C++">
    <compoundname>sbfLogFile.c</compoundname>
    <includes refid="sbf_log_file_8h" local="yes">sbfLogFile.h</includes>
    <includes refid="sbf_log_file_private_8h" local="yes">sbfLogFilePrivate.h</includes>
    <incdepgraph>
      <node id="993">
        <label>event.h</label>
      </node>
      <node id="992">
        <label>sbfVersion.h</label>
        <link refid="sbf_version_8h"/>
      </node>
      <node id="994">
        <label>syshash.h</label>
        <link refid="syshash_8h"/>
        <childnode refid="995" relation="include">
        </childnode>
      </node>
      <node id="998">
        <label>sbfFatal.h</label>
        <link refid="sbf_fatal_8h"/>
        <childnode refid="991" relation="include">
        </childnode>
      </node>
      <node id="995">
        <label>sys/types.h</label>
      </node>
      <node id="1002">
        <label>sbfPath.h</label>
        <link refid="sbf_path_8h"/>
        <childnode refid="991" relation="include">
        </childnode>
      </node>
      <node id="1001">
        <label>sbfLogFilePrivate.h</label>
        <link refid="sbf_log_file_private_8h"/>
        <childnode refid="991" relation="include">
        </childnode>
        <childnode refid="1002" relation="include">
        </childnode>
      </node>
      <node id="991">
        <label>sbfCommon.h</label>
        <link refid="sbf_common_8h"/>
        <childnode refid="992" relation="include">
        </childnode>
        <childnode refid="993" relation="include">
        </childnode>
        <childnode refid="994" relation="include">
        </childnode>
        <childnode refid="996" relation="include">
        </childnode>
        <childnode refid="997" relation="include">
        </childnode>
        <childnode refid="998" relation="include">
        </childnode>
        <childnode refid="999" relation="include">
        </childnode>
        <childnode refid="1000" relation="include">
        </childnode>
      </node>
      <node id="997">
        <label>systree.h</label>
        <link refid="systree_8h"/>
      </node>
      <node id="996">
        <label>sysqueue.h</label>
        <link refid="sysqueue_8h"/>
      </node>
      <node id="999">
        <label>sbfLog.h</label>
        <link refid="sbf_log_8h"/>
        <childnode refid="991" relation="include">
        </childnode>
      </node>
      <node id="1000">
        <label>sbfMemory.h</label>
        <link refid="sbf_memory_8h"/>
        <childnode refid="991" relation="include">
        </childnode>
      </node>
      <node id="989">
        <label>common/sbfLogFile.c</label>
        <link refid="sbf_log_file_8c"/>
        <childnode refid="990" relation="include">
        </childnode>
        <childnode refid="1001" relation="include">
        </childnode>
      </node>
      <node id="990">
        <label>sbfLogFile.h</label>
        <link refid="sbf_log_file_8h"/>
        <childnode refid="991" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="sbf_log_file_8c_1a1e82fecf891e61a971d34ff0b68fa02d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* sbfLogFileGetPath</definition>
        <argsstring>(const char *root, const char *fmt, va_list ap)</argsstring>
        <name>sbfLogFileGetPath</name>
        <param>
          <type>const char *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>ap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLogFile.c" line="5" column="1" bodyfile="common/sbfLogFile.c" bodystart="5" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_file_8c_1a1a5a7a9f4dc09cd916b49d6d21da37b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sbfLogFile_size</definition>
        <argsstring>(void)</argsstring>
        <name>sbfLogFile_size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLogFile.c" line="20" column="1" bodyfile="common/sbfLogFile.c" bodystart="20" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_file_8c_1ac9699fc0a5f2b0bcf12d25aee6e25bb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_log_file_8h_1a9b36dc99b09e3793952404b03558113f" kindref="member">sbfLogFile</ref></type>
        <definition>sbfLogFile sbfLogFile_create</definition>
        <argsstring>(char **error, const char *root, const char *fmt,...)</argsstring>
        <name>sbfLogFile_create</name>
        <param>
          <type>char **</type>
          <declname>error</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLogFile.c" line="26" column="1" bodyfile="common/sbfLogFile.c" bodystart="26" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_file_8c_1a6a9c7cdcc3d28b98ac37f5d4a1f57344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_log_file_8h_1a9b36dc99b09e3793952404b03558113f" kindref="member">sbfLogFile</ref></type>
        <definition>sbfLogFile sbfLogFile_open</definition>
        <argsstring>(char **error, const char *root, const char *fmt,...)</argsstring>
        <name>sbfLogFile_open</name>
        <param>
          <type>char **</type>
          <declname>error</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLogFile.c" line="96" column="1" bodyfile="common/sbfLogFile.c" bodystart="96" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_file_8c_1a92be47d83f9074561f5a1302a8002859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbfLogFile_close</definition>
        <argsstring>(sbfLogFile lf)</argsstring>
        <name>sbfLogFile_close</name>
        <param>
          <type><ref refid="sbf_log_file_8h_1a9b36dc99b09e3793952404b03558113f" kindref="member">sbfLogFile</ref></type>
          <declname>lf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLogFile.c" line="165" column="1" bodyfile="common/sbfLogFile.c" bodystart="165" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_file_8c_1a2d36e319fcd325e78f91efa4a4e57a72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_log_file_8h_1a7cb00db30f3f48da671c46f75d2216ae" kindref="member">sbfLogFileEntry</ref></type>
        <definition>sbfLogFileEntry sbfLogFile_get</definition>
        <argsstring>(sbfLogFile lf)</argsstring>
        <name>sbfLogFile_get</name>
        <param>
          <type><ref refid="sbf_log_file_8h_1a9b36dc99b09e3793952404b03558113f" kindref="member">sbfLogFile</ref></type>
          <declname>lf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLogFile.c" line="175" column="1" bodyfile="common/sbfLogFile.c" bodystart="175" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_file_8c_1a8e6795b00df36fdc5ddc1008161f7367" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbfLogFile_flush</definition>
        <argsstring>(sbfLogFile lf, sbfLogFileEntry lfe)</argsstring>
        <name>sbfLogFile_flush</name>
        <param>
          <type><ref refid="sbf_log_file_8h_1a9b36dc99b09e3793952404b03558113f" kindref="member">sbfLogFile</ref></type>
          <declname>lf</declname>
        </param>
        <param>
          <type><ref refid="sbf_log_file_8h_1a7cb00db30f3f48da671c46f75d2216ae" kindref="member">sbfLogFileEntry</ref></type>
          <declname>lfe</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLogFile.c" line="188" column="1" bodyfile="common/sbfLogFile.c" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="sbf_log_file_8c_1a417a42fe0df8aa54c8e9ee35d46c5289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_log_file_8h_1a7cb00db30f3f48da671c46f75d2216ae" kindref="member">sbfLogFileEntry</ref></type>
        <definition>sbfLogFileEntry sbfLogFile_read</definition>
        <argsstring>(sbfLogFile lf, u_int *number)</argsstring>
        <name>sbfLogFile_read</name>
        <param>
          <type><ref refid="sbf_log_file_8h_1a9b36dc99b09e3793952404b03558113f" kindref="member">sbfLogFile</ref></type>
          <declname>lf</declname>
        </param>
        <param>
          <type>u_int *</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="common/sbfLogFile.c" line="194" column="1" bodyfile="common/sbfLogFile.c" bodystart="194" bodyend="205"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_log_file_8h" kindref="compound">sbfLogFile.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_log_file_private_8h" kindref="compound">sbfLogFilePrivate.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight></codeline>
<codeline lineno="5"><highlight class="normal">sbfLogFileGetPath<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>va_list<sp/>ap)</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>tmp;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_memory_8h_1af5d74576e3ce200262430d8075c2648b" kindref="member">xvasprintf</ref><sp/>(&amp;tmp,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*tmp<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_memory_8h_1a01a498148ebe0f21be370f06f2ec84f7" kindref="member">xasprintf</ref><sp/>(&amp;path,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s&quot;</highlight><highlight class="normal">,<sp/>root,<sp/>tmp);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>free<sp/>(tmp);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="sbf_log_file_8h_1a1a5a7a9f4dc09cd916b49d6d21da37b6" refkind="member"><highlight class="normal"><ref refid="sbf_log_file_8c_1a1a5a7a9f4dc09cd916b49d6d21da37b6" kindref="member">sbfLogFile_size</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="sbf_log_file_8h_1a570f1f78d9299409bc43340078f691d6" kindref="member">SBF_LOG_FILE_ENTRIES</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sbfLogFileEntryImpl);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="sbf_log_file_8h_1a9b36dc99b09e3793952404b03558113f" kindref="member">sbfLogFile</ref></highlight></codeline>
<codeline lineno="26" refid="sbf_log_file_8c_1ac9699fc0a5f2b0bcf12d25aee6e25bb8" refkind="member"><highlight class="normal"><ref refid="sbf_log_file_8c_1ac9699fc0a5f2b0bcf12d25aee6e25bb8" kindref="member">sbfLogFile_create</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>error,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_log_file_8h_1a9b36dc99b09e3793952404b03558113f" kindref="member">sbfLogFile</ref><sp/>lf;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><sp/><sp/><sp/>ap;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/>tmp;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>size;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>lf<sp/>=<sp/><ref refid="sbf_memory_8h_1ade8988c3fcdbca51eb623eb5f7ad5150" kindref="member">xcalloc</ref><sp/>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>*lf);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start<sp/>(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>lf-&gt;mPath<sp/>=<sp/>sbfLogFileGetPath<sp/>(root,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end<sp/>(ap);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_memory_8h_1a01a498148ebe0f21be370f06f2ec84f7" kindref="member">xasprintf</ref><sp/>(&amp;tmp,<sp/></highlight><highlight class="stringliteral">&quot;%s.tmp&quot;</highlight><highlight class="normal">,<sp/>lf-&gt;mPath);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>fd<sp/>=<sp/>open<sp/>(tmp,<sp/>O_RDWR|O_CREAT|<ref refid="sbf_common_darwin_8h_1a476bb0c47c4ceb1669c15c2635c94300" kindref="member">O_NOATIME</ref>,<sp/>0644);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_memory_8h_1a01a498148ebe0f21be370f06f2ec84f7" kindref="member">xasprintf</ref><sp/>(error,<sp/></highlight><highlight class="stringliteral">&quot;open(\&quot;%s\&quot;)<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>tmp,<sp/>strerror<sp/>(errno));</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/><ref refid="sbf_log_file_8c_1a1a5a7a9f4dc09cd916b49d6d21da37b6" kindref="member">sbfLogFile_size</ref><sp/>();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pwrite<sp/>(fd,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>size<sp/>-<sp/>1)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_memory_8h_1a01a498148ebe0f21be370f06f2ec84f7" kindref="member">xasprintf</ref><sp/>(error,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;pwrite(\&quot;%s\&quot;,<sp/>%zu)<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror<sp/>(errno));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rename<sp/>(tmp,<sp/>lf-&gt;mPath)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_memory_8h_1a01a498148ebe0f21be370f06f2ec84f7" kindref="member">xasprintf</ref><sp/>(error,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;rename(\&quot;%s\&quot;,<sp/>\&quot;%s\&quot;)<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf-&gt;mPath,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror<sp/>(errno));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>lf-&gt;mBase<sp/>=<sp/><ref refid="sbf_common_win32_8c_1adcdc6990a7641f7ba05f5dd2a603b992" kindref="member">mmap</ref><sp/>(NULL,<sp/>size,<sp/><ref refid="sbf_common_win32_8h_1a2a79c8ceefb8fc25a940ae07a3d94429" kindref="member">PROT_WRITE</ref>,<sp/>MAP_SHARED|<ref refid="sbf_common_darwin_8h_1aa798680682fd4abb5a1ddd7c36ecad70" kindref="member">MAP_POPULATE</ref>,<sp/>fd,<sp/>0);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lf-&gt;mBase<sp/>==<sp/><ref refid="sbf_common_win32_8h_1a8523dcf952f6ff059a3bed717e4f1296" kindref="member">MAP_FAILED</ref>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_memory_8h_1a01a498148ebe0f21be370f06f2ec84f7" kindref="member">xasprintf</ref><sp/>(error,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mmap(\&quot;%s\&quot;,<sp/>%zu)<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror<sp/>(errno));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>lf-&gt;mNext<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>close<sp/>(fd);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>free<sp/>(tmp);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lf;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal">fail:</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_log_file_8c_1a92be47d83f9074561f5a1302a8002859" kindref="member">sbfLogFile_close</ref><sp/>(lf);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close<sp/>(fd);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>free<sp/>(tmp);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="sbf_log_file_8h_1a9b36dc99b09e3793952404b03558113f" kindref="member">sbfLogFile</ref></highlight></codeline>
<codeline lineno="96" refid="sbf_log_file_8c_1a6a9c7cdcc3d28b98ac37f5d4a1f57344" refkind="member"><highlight class="normal"><ref refid="sbf_log_file_8c_1a6a9c7cdcc3d28b98ac37f5d4a1f57344" kindref="member">sbfLogFile_open</ref><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>error,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_log_file_8h_1a9b36dc99b09e3793952404b03558113f" kindref="member">sbfLogFile</ref><sp/><sp/>lf;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/><sp/><sp/><sp/><sp/>ap;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>size;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="sbf_common_win32_8h_1a149da0702b060478da4d59ffe807adac" kindref="member">stat</ref><sp/>sb;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>lf<sp/>=<sp/><ref refid="sbf_memory_8h_1ade8988c3fcdbca51eb623eb5f7ad5150" kindref="member">xcalloc</ref><sp/>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>*lf);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start<sp/>(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>lf-&gt;mPath<sp/>=<sp/>sbfLogFileGetPath<sp/>(root,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end<sp/>(ap);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>fd<sp/>=<sp/>open<sp/>(lf-&gt;mPath,<sp/>O_RDWR|<ref refid="sbf_common_darwin_8h_1a476bb0c47c4ceb1669c15c2635c94300" kindref="member">O_NOATIME</ref>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_memory_8h_1a01a498148ebe0f21be370f06f2ec84f7" kindref="member">xasprintf</ref><sp/>(error,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;open(\&quot;%s\&quot;)<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf-&gt;mPath,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror<sp/>(errno));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>size<sp/>=<sp/><ref refid="sbf_log_file_8c_1a1a5a7a9f4dc09cd916b49d6d21da37b6" kindref="member">sbfLogFile_size</ref><sp/>();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="sbf_common_win32_8h_1aa84a9ac582a3b7d9a0dea52e851855ea" kindref="member">fstat</ref><sp/>(fd,<sp/>&amp;sb)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_memory_8h_1a01a498148ebe0f21be370f06f2ec84f7" kindref="member">xasprintf</ref><sp/>(error,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fstat(\&quot;%s\&quot;)<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf-&gt;mPath,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror<sp/>(errno));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb.st_size<sp/>!=<sp/>(off_t)size)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_memory_8h_1a01a498148ebe0f21be370f06f2ec84f7" kindref="member">xasprintf</ref><sp/>(error,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>is<sp/>the<sp/>wrong<sp/>size<sp/>(size<sp/>%zu,<sp/>expected<sp/>%zu)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf-&gt;mPath,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb.st_size,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>lf-&gt;mBase<sp/>=<sp/><ref refid="sbf_common_win32_8c_1adcdc6990a7641f7ba05f5dd2a603b992" kindref="member">mmap</ref><sp/>(NULL,<sp/>size,<sp/><ref refid="sbf_common_win32_8h_1a15bf68ce8b590838b3a5c0b639d8d519" kindref="member">PROT_READ</ref>,<sp/>MAP_SHARED,<sp/>fd,<sp/>0);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lf-&gt;mBase<sp/>==<sp/><ref refid="sbf_common_win32_8h_1a8523dcf952f6ff059a3bed717e4f1296" kindref="member">MAP_FAILED</ref>)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_memory_8h_1a01a498148ebe0f21be370f06f2ec84f7" kindref="member">xasprintf</ref><sp/>(error,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;mmap(\&quot;%s\&quot;,<sp/>%zu)<sp/>failed:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lf-&gt;mPath,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror<sp/>(errno));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>fail;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>lf-&gt;mNext<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>close<sp/>(fd);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lf;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">fail:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_log_file_8c_1a92be47d83f9074561f5a1302a8002859" kindref="member">sbfLogFile_close</ref><sp/>(lf);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close<sp/>(fd);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="sbf_log_file_8h_1ac9f01be8bb13bf161ff90f6d4f0bf127" refkind="member"><highlight class="normal"><ref refid="sbf_log_file_8c_1a92be47d83f9074561f5a1302a8002859" kindref="member">sbfLogFile_close</ref><sp/>(<ref refid="sbf_log_file_8h_1a9b36dc99b09e3793952404b03558113f" kindref="member">sbfLogFile</ref><sp/>lf)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lf-&gt;mBase<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_common_win32_8c_1a7d888f95854ef9b7a9990f3b513bfef2" kindref="member">munmap</ref><sp/>(lf-&gt;mBase,<sp/><ref refid="sbf_log_file_8c_1a1a5a7a9f4dc09cd916b49d6d21da37b6" kindref="member">sbfLogFile_size</ref><sp/>());</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>free<sp/>((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)lf-&gt;mPath);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>free<sp/>(lf);</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><ref refid="sbf_log_file_8h_1a7cb00db30f3f48da671c46f75d2216ae" kindref="member">sbfLogFileEntry</ref></highlight></codeline>
<codeline lineno="175" refid="sbf_log_file_8h_1a2d36e319fcd325e78f91efa4a4e57a72" refkind="member"><highlight class="normal"><ref refid="sbf_log_file_8c_1a2d36e319fcd325e78f91efa4a4e57a72" kindref="member">sbfLogFile_get</ref><sp/>(<ref refid="sbf_log_file_8h_1a9b36dc99b09e3793952404b03558113f" kindref="member">sbfLogFile</ref><sp/>lf)</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_log_file_8h_1a7cb00db30f3f48da671c46f75d2216ae" kindref="member">sbfLogFileEntry</ref><sp/>lfe;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>u_int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>number<sp/>=<sp/>__sync_fetch_and_add<sp/>(&amp;lf-&gt;mNext,<sp/>1);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>lfe<sp/>=<sp/>&amp;lf-&gt;mBase[number<sp/>%<sp/><ref refid="sbf_log_file_8h_1a570f1f78d9299409bc43340078f691d6" kindref="member">SBF_LOG_FILE_ENTRIES</ref>];</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>lfe-&gt;mNumber<sp/>=<sp/>number;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lfe;</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="sbf_log_file_8h_1a8e6795b00df36fdc5ddc1008161f7367" refkind="member"><highlight class="normal"><ref refid="sbf_log_file_8c_1a8e6795b00df36fdc5ddc1008161f7367" kindref="member">sbfLogFile_flush</ref><sp/>(<ref refid="sbf_log_file_8h_1a9b36dc99b09e3793952404b03558113f" kindref="member">sbfLogFile</ref><sp/>lf,<sp/><ref refid="sbf_log_file_8h_1a7cb00db30f3f48da671c46f75d2216ae" kindref="member">sbfLogFileEntry</ref><sp/>lfe)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>__sync_synchronize<sp/>();</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><ref refid="sbf_log_file_8h_1a7cb00db30f3f48da671c46f75d2216ae" kindref="member">sbfLogFileEntry</ref></highlight></codeline>
<codeline lineno="194" refid="sbf_log_file_8h_1a417a42fe0df8aa54c8e9ee35d46c5289" refkind="member"><highlight class="normal"><ref refid="sbf_log_file_8c_1a417a42fe0df8aa54c8e9ee35d46c5289" kindref="member">sbfLogFile_read</ref><sp/>(<ref refid="sbf_log_file_8h_1a9b36dc99b09e3793952404b03558113f" kindref="member">sbfLogFile</ref><sp/>lf,<sp/>u_int*<sp/>number)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_log_file_8h_1a7cb00db30f3f48da671c46f75d2216ae" kindref="member">sbfLogFileEntry</ref><sp/>lfe;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>__sync_synchronize<sp/>();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>lfe<sp/>=<sp/>&amp;lf-&gt;mBase[*number<sp/>%<sp/><ref refid="sbf_log_file_8h_1a570f1f78d9299409bc43340078f691d6" kindref="member">SBF_LOG_FILE_ENTRIES</ref>];</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lfe-&gt;mTime.tv_sec<sp/>==<sp/>0<sp/>||<sp/>lfe-&gt;mNumber<sp/>&lt;<sp/>*number)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>(*number)++;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lfe;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="common/sbfLogFile.c"/>
  </compounddef>
</doxygen>
