<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sbf_timer_8c" kind="file" language="C++">
    <compoundname>sbfTimer.c</compoundname>
    <includes refid="sbf_timer_8h" local="yes">sbfTimer.h</includes>
    <includes refid="sbf_timer_private_8h" local="yes">sbfTimerPrivate.h</includes>
    <incdepgraph>
      <node id="2558">
        <label>event.h</label>
      </node>
      <node id="2557">
        <label>sbfVersion.h</label>
        <link refid="sbf_version_8h"/>
      </node>
      <node id="2559">
        <label>syshash.h</label>
        <link refid="syshash_8h"/>
        <childnode refid="2560" relation="include">
        </childnode>
      </node>
      <node id="2568">
        <label>sbfEvent.h</label>
        <link refid="sbf_event_8h"/>
        <childnode refid="2556" relation="include">
        </childnode>
      </node>
      <node id="2563">
        <label>sbfFatal.h</label>
        <link refid="sbf_fatal_8h"/>
        <childnode refid="2556" relation="include">
        </childnode>
      </node>
      <node id="2574">
        <label>event2/listener.h</label>
      </node>
      <node id="2570">
        <label>sbfKeyValue.h</label>
        <link refid="sbf_key_value_8h"/>
        <childnode refid="2556" relation="include">
        </childnode>
      </node>
      <node id="2569">
        <label>sbfHiResTimer.h</label>
        <link refid="sbf_hi_res_timer_8h"/>
        <childnode refid="2556" relation="include">
        </childnode>
      </node>
      <node id="2560">
        <label>sys/types.h</label>
      </node>
      <node id="2573">
        <label>event2/thread.h</label>
      </node>
      <node id="2572">
        <label>sbfMwPrivate.h</label>
        <link refid="sbf_mw_private_8h"/>
        <childnode refid="2558" relation="include">
        </childnode>
        <childnode refid="2573" relation="include">
        </childnode>
        <childnode refid="2574" relation="include">
        </childnode>
      </node>
      <node id="2566">
        <label>sbfTimerPrivate.h</label>
        <link refid="sbf_timer_private_8h"/>
        <childnode refid="2567" relation="include">
        </childnode>
        <childnode refid="2572" relation="include">
        </childnode>
        <childnode refid="2575" relation="include">
        </childnode>
      </node>
      <node id="2575">
        <label>sbfRefCount.h</label>
        <link refid="sbf_ref_count_8h"/>
        <childnode refid="2556" relation="include">
        </childnode>
      </node>
      <node id="2554">
        <label>core/sbfTimer.c</label>
        <link refid="sbf_timer_8c"/>
        <childnode refid="2555" relation="include">
        </childnode>
        <childnode refid="2566" relation="include">
        </childnode>
      </node>
      <node id="2555">
        <label>sbfTimer.h</label>
        <link refid="sbf_timer_8h"/>
        <childnode refid="2556" relation="include">
        </childnode>
      </node>
      <node id="2556">
        <label>sbfCommon.h</label>
        <link refid="sbf_common_8h"/>
        <childnode refid="2557" relation="include">
        </childnode>
        <childnode refid="2558" relation="include">
        </childnode>
        <childnode refid="2559" relation="include">
        </childnode>
        <childnode refid="2561" relation="include">
        </childnode>
        <childnode refid="2562" relation="include">
        </childnode>
        <childnode refid="2563" relation="include">
        </childnode>
        <childnode refid="2564" relation="include">
        </childnode>
        <childnode refid="2565" relation="include">
        </childnode>
      </node>
      <node id="2562">
        <label>systree.h</label>
        <link refid="systree_8h"/>
      </node>
      <node id="2561">
        <label>sysqueue.h</label>
        <link refid="sysqueue_8h"/>
      </node>
      <node id="2567">
        <label>sbfMw.h</label>
        <link refid="sbf_mw_8h"/>
        <childnode refid="2556" relation="include">
        </childnode>
        <childnode refid="2568" relation="include">
        </childnode>
        <childnode refid="2569" relation="include">
        </childnode>
        <childnode refid="2570" relation="include">
        </childnode>
        <childnode refid="2571" relation="include">
        </childnode>
        <childnode refid="2555" relation="include">
        </childnode>
      </node>
      <node id="2564">
        <label>sbfLog.h</label>
        <link refid="sbf_log_8h"/>
        <childnode refid="2556" relation="include">
        </childnode>
      </node>
      <node id="2571">
        <label>sbfQueue.h</label>
        <link refid="sbf_queue_8h"/>
        <childnode refid="2556" relation="include">
        </childnode>
      </node>
      <node id="2565">
        <label>sbfMemory.h</label>
        <link refid="sbf_memory_8h"/>
        <childnode refid="2556" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="sbf_timer_8c_1a2fbe004a3b0dba90c715ad62e598307f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sbfTimerQueueCb</definition>
        <argsstring>(sbfQueueItem item, void *closure)</argsstring>
        <name>sbfTimerQueueCb</name>
        <param>
          <type><ref refid="sbf_queue_8h_1ad7433ebbf8ca13f31f33dddedbdf5533" kindref="member">sbfQueueItem</ref></type>
          <declname>item</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>closure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/sbfTimer.c" line="5" column="1" bodyfile="core/sbfTimer.c" bodystart="5" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="sbf_timer_8c_1a242358830838c73e71b6ec1e24104b14" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sbfTimerEventCb</definition>
        <argsstring>(int fd, short events, void *closure)</argsstring>
        <name>sbfTimerEventCb</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>short</type>
          <declname>events</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>closure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/sbfTimer.c" line="17" column="1" bodyfile="core/sbfTimer.c" bodystart="17" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="sbf_timer_8c_1aae7a500a10f8e3c6ff6e5cf9898f8185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sbf_timer_8h_1a107fc98170a20456ae5fbea0e5862ec2" kindref="member">sbfTimer</ref></type>
        <definition>sbfTimer sbfTimer_create</definition>
        <argsstring>(sbfMwThread thread, sbfQueue queue, sbfTimerCb cb, void *closure, double interval)</argsstring>
        <name>sbfTimer_create</name>
        <param>
          <type><ref refid="sbf_mw_8h_1aa3f5e9034630ab7894fc62735044c133" kindref="member">sbfMwThread</ref></type>
          <declname>thread</declname>
        </param>
        <param>
          <type><ref refid="sbf_queue_8h_1aa8b64a26e53f1e9c6eef9d3379d805e3" kindref="member">sbfQueue</ref></type>
          <declname>queue</declname>
        </param>
        <param>
          <type><ref refid="sbf_timer_8h_1ad4886ffe6e46a398e2c741ebd64fe552" kindref="member">sbfTimerCb</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>closure</declname>
        </param>
        <param>
          <type>double</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/sbfTimer.c" line="31" column="1" bodyfile="core/sbfTimer.c" bodystart="31" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="sbf_timer_8c_1af5cdfdf64302d94b1197ca7ea5fece24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sbfTimer_destroy</definition>
        <argsstring>(sbfTimer timer)</argsstring>
        <name>sbfTimer_destroy</name>
        <param>
          <type><ref refid="sbf_timer_8h_1a107fc98170a20456ae5fbea0e5862ec2" kindref="member">sbfTimer</ref></type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>Release the memory allocated by the high resolution timer. This also stops the timer so no callback will be raised. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>the timer handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/sbfTimer.c" line="72" column="1" bodyfile="core/sbfTimer.c" bodystart="72" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="sbf_timer_8c_1a61b6a284186fcc95558f0f716b6e0f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double sbfTimer_getInterval</definition>
        <argsstring>(sbfTimer timer)</argsstring>
        <name>sbfTimer_getInterval</name>
        <param>
          <type><ref refid="sbf_timer_8h_1a107fc98170a20456ae5fbea0e5862ec2" kindref="member">sbfTimer</ref></type>
          <declname>timer</declname>
        </param>
        <briefdescription>
<para>returns the interval the timer was configured. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>the timer handler. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the interval, in seconds, the timer is configured to fire the callback. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/sbfTimer.c" line="84" column="1" bodyfile="core/sbfTimer.c" bodystart="84" bodyend="87"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_timer_8h" kindref="compound">sbfTimer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sbf_timer_private_8h" kindref="compound">sbfTimerPrivate.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">sbfTimerQueueCb<sp/>(<ref refid="structsbf_queue_item_impl" kindref="compound">sbfQueueItem</ref><sp/>item,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>closure)</highlight></codeline>
<codeline lineno="6"><highlight class="normal">{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsbf_timer_impl" kindref="compound">sbfTimer</ref><sp/>timer<sp/>=<sp/>closure;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!timer-&gt;<ref refid="structsbf_timer_impl_1ae34b6127c52d187c9a73fbee3b25ae3e" kindref="member">mDestroyed</ref>)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer-&gt;<ref refid="structsbf_timer_impl_1aeece9ca1d038468016aba842c43b7b79" kindref="member">mCb</ref><sp/>(timer,<sp/>timer-&gt;<ref refid="structsbf_timer_impl_1aab2a38dbc883fa9b25efa2e163471bd9" kindref="member">mClosure</ref>);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sbfRefCount_decrement<sp/>(&amp;timer-&gt;<ref refid="structsbf_timer_impl_1aad5cc5cec2fe8e32cac63b2168377491" kindref="member">mRefCount</ref>))</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free<sp/>(timer);</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">sbfTimerEventCb<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>events,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>closure)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsbf_timer_impl" kindref="compound">sbfTimer</ref><sp/>timer<sp/>=<sp/>closure;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>event_add<sp/>(&amp;timer-&gt;<ref refid="structsbf_timer_impl_1aacb84736518058ce4ed759649660ef8e" kindref="member">mEvent</ref>,<sp/>&amp;timer-&gt;<ref refid="structsbf_timer_impl_1ae8375698915ccf841f4849fd393e3d01" kindref="member">mTime</ref>);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!timer-&gt;<ref refid="structsbf_timer_impl_1ae34b6127c52d187c9a73fbee3b25ae3e" kindref="member">mDestroyed</ref>)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbfRefCount_increment<sp/>(&amp;timer-&gt;<ref refid="structsbf_timer_impl_1aad5cc5cec2fe8e32cac63b2168377491" kindref="member">mRefCount</ref>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_queue_8c_1a4a0a1c5ebaca33ef41cfc984c536bf01" kindref="member">sbfQueue_enqueue</ref><sp/>(timer-&gt;<ref refid="structsbf_timer_impl_1a5380973f4fc8e5f0005e22be157152e1" kindref="member">mQueue</ref>,<sp/>sbfTimerQueueCb,<sp/>timer);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="structsbf_timer_impl" kindref="compound">sbfTimer</ref></highlight></codeline>
<codeline lineno="31" refid="sbf_timer_8c_1aae7a500a10f8e3c6ff6e5cf9898f8185" refkind="member"><highlight class="normal"><ref refid="sbf_timer_8c_1aae7a500a10f8e3c6ff6e5cf9898f8185" kindref="member">sbfTimer_create</ref><sp/>(<ref refid="structsbf_mw_thread_impl" kindref="compound">sbfMwThread</ref><sp/>thread,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsbf_queue_impl" kindref="compound">sbfQueue</ref><sp/>queue,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sbf_timer_8h_1ad4886ffe6e46a398e2c741ebd64fe552" kindref="member">sbfTimerCb</ref><sp/>cb,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>closure,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>interval)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsbf_timer_impl" kindref="compound">sbfTimer</ref><sp/>timer;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>timer<sp/>=<sp/><ref refid="sbf_memory_8h_1a6af5faec3f9662b20ffc9903f923dec0" kindref="member">xmalloc</ref><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>*timer);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>timer-&gt;<ref refid="structsbf_timer_impl_1a9ecc46cda89b5c541e867869646b9168" kindref="member">mThread</ref><sp/>=<sp/>thread;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>timer-&gt;<ref refid="structsbf_timer_impl_1a5380973f4fc8e5f0005e22be157152e1" kindref="member">mQueue</ref><sp/>=<sp/>queue;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>timer-&gt;<ref refid="structsbf_timer_impl_1afd0ee3733e35211d4dd0a7880a80387f" kindref="member">mInterval</ref><sp/>=<sp/>interval;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>timer-&gt;<ref refid="structsbf_timer_impl_1aeece9ca1d038468016aba842c43b7b79" kindref="member">mCb</ref><sp/>=<sp/>cb;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>timer-&gt;<ref refid="structsbf_timer_impl_1aab2a38dbc883fa9b25efa2e163471bd9" kindref="member">mClosure</ref><sp/>=<sp/>closure;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>timer-&gt;<ref refid="structsbf_timer_impl_1ae34b6127c52d187c9a73fbee3b25ae3e" kindref="member">mDestroyed</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>sbfRefCount_init<sp/>(&amp;timer-&gt;<ref refid="structsbf_timer_impl_1aad5cc5cec2fe8e32cac63b2168377491" kindref="member">mRefCount</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>timerclear<sp/>(&amp;timer-&gt;<ref refid="structsbf_timer_impl_1ae8375698915ccf841f4849fd393e3d01" kindref="member">mTime</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>timer-&gt;<ref refid="structsbf_timer_impl_1ae8375698915ccf841f4849fd393e3d01" kindref="member">mTime</ref>.tv_sec<sp/>=<sp/>(u_int)interval;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>timer-&gt;<ref refid="structsbf_timer_impl_1ae8375698915ccf841f4849fd393e3d01" kindref="member">mTime</ref>.tv_usec<sp/>=<sp/>(u_int)((interval<sp/>-<sp/>timer-&gt;<ref refid="structsbf_timer_impl_1ae8375698915ccf841f4849fd393e3d01" kindref="member">mTime</ref>.tv_sec)<sp/>*<sp/>1000000);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_log_8h_1aae0c47552712e01de64869037cbf4e56" kindref="member">sbfLog_debug</ref><sp/>(timer-&gt;<ref refid="structsbf_timer_impl_1a9ecc46cda89b5c541e867869646b9168" kindref="member">mThread</ref>-&gt;<ref refid="structsbf_mw_thread_impl_1a18ff87866b3d61e1772e92945d1ab8a1" kindref="member">mParent</ref>-&gt;mLog,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;creating<sp/>timer<sp/>%p:<sp/>interval<sp/>%.3f<sp/>seconds&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer-&gt;<ref refid="structsbf_timer_impl_1afd0ee3733e35211d4dd0a7880a80387f" kindref="member">mInterval</ref>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>event_assign<sp/>(&amp;timer-&gt;<ref refid="structsbf_timer_impl_1aacb84736518058ce4ed759649660ef8e" kindref="member">mEvent</ref>,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer-&gt;<ref refid="structsbf_timer_impl_1a9ecc46cda89b5c541e867869646b9168" kindref="member">mThread</ref>-&gt;<ref refid="structsbf_mw_thread_impl_1a626a5a2cdfd9561709c69669d337d0ec" kindref="member">mEventBase</ref>,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sbfTimerEventCb,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>event_add<sp/>(&amp;timer-&gt;<ref refid="structsbf_timer_impl_1aacb84736518058ce4ed759649660ef8e" kindref="member">mEvent</ref>,<sp/>&amp;timer-&gt;<ref refid="structsbf_timer_impl_1ae8375698915ccf841f4849fd393e3d01" kindref="member">mTime</ref>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>timer;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="sbf_timer_8h_1af5cdfdf64302d94b1197ca7ea5fece24" refkind="member"><highlight class="normal"><ref refid="sbf_timer_8c_1af5cdfdf64302d94b1197ca7ea5fece24" kindref="member">sbfTimer_destroy</ref><sp/>(<ref refid="structsbf_timer_impl" kindref="compound">sbfTimer</ref><sp/>timer)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sbf_log_8h_1aae0c47552712e01de64869037cbf4e56" kindref="member">sbfLog_debug</ref><sp/>(timer-&gt;<ref refid="structsbf_timer_impl_1a9ecc46cda89b5c541e867869646b9168" kindref="member">mThread</ref>-&gt;<ref refid="structsbf_mw_thread_impl_1a18ff87866b3d61e1772e92945d1ab8a1" kindref="member">mParent</ref>-&gt;mLog,<sp/></highlight><highlight class="stringliteral">&quot;destroying<sp/>timer<sp/>%p&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>timer-&gt;<ref refid="structsbf_timer_impl_1ae34b6127c52d187c9a73fbee3b25ae3e" kindref="member">mDestroyed</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>event_del<sp/>(&amp;timer-&gt;<ref refid="structsbf_timer_impl_1aacb84736518058ce4ed759649660ef8e" kindref="member">mEvent</ref>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sbfRefCount_decrement<sp/>(&amp;timer-&gt;<ref refid="structsbf_timer_impl_1aad5cc5cec2fe8e32cac63b2168377491" kindref="member">mRefCount</ref>))</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free<sp/>(timer);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="sbf_timer_8h_1a61b6a284186fcc95558f0f716b6e0f49" refkind="member"><highlight class="normal"><ref refid="sbf_timer_8c_1a61b6a284186fcc95558f0f716b6e0f49" kindref="member">sbfTimer_getInterval</ref><sp/>(<ref refid="structsbf_timer_impl" kindref="compound">sbfTimer</ref><sp/>timer)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>timer-&gt;<ref refid="structsbf_timer_impl_1afd0ee3733e35211d4dd0a7880a80387f" kindref="member">mInterval</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="core/sbfTimer.c"/>
  </compounddef>
</doxygen>
